;;; init.el --- Emacs init -*- lexical-binding: t -*-
;;

;; Copyright (c) 2022 mattiasdrp and contributors.

;; Author: mattiasdrp
;; Maintainer: mattiasdrp <https://github.com/mattiasdrp>
;; Created: 17 august 2022
;; Version: 1.0
;; Licence: MIT
;; Keywords: emacs, init, convenience, configuration
;; URL: https://github.com/mattiasdrp/pokemacs

;;; Commentary:

;; This file IS NOT intended to be edited! It was generated by init.org.
;; If you want to change it, edit init.org then M-x org-babel-tangle

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Code:

(defvar elpaca-installer-version 0.9)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

;; Install use-package support
(elpaca bind-key)

(elpaca elpaca-use-package
        ;; Enable :ensure use-package keyword.
        (elpaca-use-package-mode)
        ;; Assume :ensure t unless otherwise specified.
        (setq elpaca-use-package-by-default t))

(use-package system-packages
  :ensure t
  :config (message "`system-packages' loaded"))

(use-package use-package-ensure-system-package
  :after (system-packages)
  :ensure nil
  :config (message "`use-package-ensure-system-package' loaded"))

(elpaca-wait)

(eval-and-compile
  (setq
   use-package-verbose t
   use-package-expand-minimally t
   use-package-compute-statistics t
   use-package-always-defer t
   use-package-enable-imenu-support t))

(setq byte-compile-warnings '(cl-functions))

;; Miscellaneous Packages
(defgroup pokemacs nil
  "Customisation group for pokemacs"
  :group 'emacs
  :tag "Pokemacs customisation")

(defgroup pokemacs-packages nil
  "Pokemacs packages options."
  :group 'pokemacs
  :tag "Packages")

(defcustom use-dashboard nil
  "If non-nil, uses the dashboard packages.
This package greets you with a nice startup screen"
  :group 'pokemacs-packages
  :type 'boolean
  :tag "󰕮 Dashboard")

(defcustom use-eaf nil
  "If non-nil, uses the Emacs application framework."
  :group 'pokemacs-packages
  :type 'boolean
  :tag "󰲋 Emacs Application Framework")

(defcustom use-gcal nil
  "If non-nil, uses the org-gcal package.
This package is used to link google calendars to org agendas.
This is way too emacsy for most people"
  :group 'pokemacs-packages
  :type 'boolean
  :tag " Org Google Calendar")

(defcustom use-god nil
  "If non-nil, uses the god (mode) packages.
Similar to Vim's separation of command/insert modes"
  :group 'pokemacs-packages
  :type 'boolean
  :tag " God Mode")

(defcustom use-magit-todos nil
  "If non-nil, show todos in the current project in magit buffer.
If your project contains a lot of todos you may want to disable this package."
  :group 'pokemacs-packages
  :type 'boolean
  :tag " Magit todos")

(defcustom use-mu4e nil
  "If non-nil, use mu4e and smtpmail.
Reading your emails in emacs, what else?"
  :group 'pokemacs-packages
  :type 'boolean
  :tag " Mu4e")

(defcustom use-org-agenda-startup nil
  "Start the org agenda at startup.
If you don't live the org life you don't need it.
But you don't live the org life.
That's on you."
  :group 'pokemacs-packages
  :type 'boolean
  :tag " Org Agenda")

(defcustom use-org-roam nil
  "If non-nil, uses Org roam.
The Zettelkasten method.
In emacs.
With org-mode."
  :group 'pokemacs-packages
  :type 'boolean
  :tag "󰠮 Zettelkasten/Org Roam")

(defcustom use-pandoc nil
  "If non-nil, uses the pandoc packages.
You know, for markdown. Because you don't use org-mode."
  :group 'pokemacs-packages
  :type 'boolean
  :tag " Pandoc")

(defcustom use-posframe nil
  "If non-nil, uses the vertico-posframe packages.
Instead of displaying candidate menus in the minibuffer display them in a fancy posframe."
  :group 'pokemacs-packages
  :type 'boolean
  :tag "󰹉 Posframe")

(defcustom use-treemacs nil
  "If non-nil, uses the treemacs packages.
Some people want vscode in their emacs. Don't gate-keep, give them their big tree."
  :group 'pokemacs-packages
  :type 'boolean
  :tag "󰙅 Treemacs")

(defcustom use-window-purpose nil
  "If non-nil, uses the window-purpose package.
Give windows a 'purpose' to prevent them from being populated by buffers that don't have the same purpose."
  :group 'pokemacs-packages
  :type 'boolean
  :tag "󰡃 Window Purpose")

;; Custom values

(defgroup pokemacs-values nil
  "Pokemacs values options."
  :group 'pokemacs
  :tag "Values")

(defcustom pokemacs-repeat-timeout 0.5
  "Time before repeat-mode exits."
  :group 'pokemacs-values
  :type 'integer
  :tag "Repeat")

;; Themes

(defgroup pokemacs-appearance nil
  "Pokemacs appearance options."
  :group 'pokemacs
  :tag "Appearance")

(defcustom pokemacs-mono-font "Fira Code"
  "Default mono font."
  :group 'pokemacs-appearance
  :type 'string
  :tag " Mono Font")

(defcustom pokemacs-variable-font "Iosevka Aile"
  "Default variable font."
  :group 'pokemacs-appearance
  :type 'string
  :tag " Variable Font")

(defcustom tuple-mono-font `(:font ,pokemacs-mono-font)
  "List of possible mono fonts (the first available one will be used).
`pokemacs-mono-font' is the first checked font"
  :group 'pokemacs-appearance
  :type 'list
  :tag " Mono Fonts")

(defcustom tuple-variable-font `(:font ,pokemacs-variable-font)
  "List of possible mono fonts (the first available one will be used).
`pokemacs-variable-font' is the first checked font"
  :group 'pokemacs-appearance
  :type 'list
  :tag " Variable Fonts")

(defcustom pokemacs-dark-theme-p t
  "Dark or light theme."
  :group 'pokemacs-appearance
  :type 'boolean
  :tag "󰔎 Dark/Light")

(defcustom pokemacs-dark-theme 'doom-solarized-dark
  "Dark theme to load."
  :group 'pokemacs-appearance
  :type 'symbol
  :tag "󰖔 Dark Theme")

(defcustom pokemacs-light-theme 'doom-solarized-light
  "Light theme to load."
  :group 'pokemacs-appearance
  :type 'symbol
  :tag "󰖙 Light Theme")

(defcustom use-all-the-icons nil
  "Use all-the-icons (when t) or nerd-icons (when nil).
nerd-icons is a better choice and I plan to stop using all-the-icons completely."
  :group 'pokemacs-appearance
  :type 'boolean
  :tag " Icons")

(defcustom use-header-line nil
  "Use the header-line as the mode-line."
  :group 'pokemacs-appearance
  :type 'boolean
  :tag "〜 Header-line")

(defcustom use-maximize nil
  "If non-nil, maximize Emacs at startup."
  :group 'pokemacs-appearance
  :type 'boolean
  :tag "󰊓 Maximize")

(defcustom use-rainbow nil
  "If non-nil, don't be @thriim.
Rainbowify parentheses and other things."
  :group 'pokemacs-appearance
  :type 'boolean
  :tag "󱃗 Rainbows")

(defcustom use-solaire t
  "If non-nil, uses the solaire package.
Distinguishes between \"real\" buffers and \"unreal\" ones by giving the latter a darker background."
  :group 'pokemacs-appearance
  :type 'boolean
  :tag " Solaire")

(defcustom use-visual-fill nil
  "If non-nil, fill the frame when there's only one."
  :group 'pokemacs-appearance
  :type 'boolean
  :tag " Visual Fill")

;; Dictionaries

(defgroup pokemacs-dictionaries nil
  "Pokemacs dictionaries options."
  :group 'pokemacs
  :tag "Dictionaries")

(defcustom pokemacs-dict "en-GB"
  "Dictionary language.
Specify the chosen language used by spell checking tools in pokemacs."
  :group 'pokemacs-dictionaries
  :type '(choice (const :tag "en-GB"   "en-GB")
                 (const :tag "en-US"   "en-US")
                 (const :tag "fr"      "fr")
                 (const :tag "No dict" nil)
                 (string :tag "Other"))
  :tag " Dictionary")

(setq user-init-file (or load-file-name (buffer-file-name)))
(setq user-emacs-directory (file-name-directory user-init-file))

(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file 'noerror)

(defun pokemacs-get-current-theme ()
  (if pokemacs-dark-theme-p
      pokemacs-dark-theme
    pokemacs-light-theme))

(setq reface-list nil)

(defun fill-reface-list (face)
  ;; saved-face is nil if the face hasn't been customized
  (message "reface %S is %S" face (get face 'saved-face))
  (unless (get face 'saved-face)
    (add-to-list 'reface-list face)))

(fill-reface-list 'show-paren-match)
(fill-reface-list 'show-paren-mismatch)

(defun reface-p (face)
  (member face reface-list))

(defun pokemacs--reface (&rest _)
  (custom-set-faces
   `(org-block ((t :background ,(doom-darken (doom-color 'bg) 0.15))) t)
   `(org-block-begin-line ((t)) t)
   `(org-block-end-line ((t :foreground unspecified :background unspecified))))
  (when (reface-p 'show-paren-match)
    (message "reface show paren match")
    (custom-set-faces
     `(show-paren-match
       ((t (:inherit region :background ,(doom-color 'base3)
                     :weight unspecified :foreground unspecified))))))
  (when (reface-p 'show-paren-mismatch)
    (custom-set-faces
     `(show-paren-mismatch
       ((t (:foreground unspecified :weight unspecified
                        :background ,(doom-color 'warning))))))))

(defun pokemacs-load-theme ()
  (load-theme (pokemacs-get-current-theme) t)
  (pokemacs--reface))

(advice-add #'consult-theme :after #'pokemacs--reface)

(defun pokemacs-toggle-dark-light-theme ()
  (interactive)
  (setq pokemacs-dark-theme-p (not pokemacs-dark-theme-p))
  (pokemacs-load-theme))

(use-package doom-themes
  :demand t
  :config
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  ;; (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  (doom-themes-treemacs-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)
  (pokemacs-load-theme)
  (message "`doom-themes' loaded"))
(elpaca-wait)

(when use-maximize
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized)))

(defvar better-gc-cons-threshold (* 128 1024 1024)) ; 128mb

(add-hook 'emacs-startup-hook
          (lambda ()
            (setq file-name-handler-alist file-name-handler-alist-original)
            (makunbound 'file-name-handler-alist-original)))

(setq gc-cons-threshold better-gc-cons-threshold)
(setq gc-cons-percentage 0.1)
(setq garbage-collection-messages nil)

(defun update-to-load-path (folder)
  "Update FOLDER and its subdirectories to `load-path'."
  (let ((base folder))
    (unless (member base load-path)
      (add-to-list 'load-path base))
    (dolist (f (directory-files base))
      (let ((name (concat base "/" f)))
        (when (and (file-directory-p name)
                   (not (equal f ".."))
                   (not (equal f ".")))
          (unless (member base load-path)
            (add-to-list 'load-path name)))))))

(update-to-load-path (expand-file-name "lisp" user-emacs-directory))

(setq frame-title-format '(buffer-file-name "%b (%f)" "%b"))

(fset 'yes-or-no-p 'y-or-n-p)

(setq-default
 ;; Save backup files in a .backup directory
 backup-directory-alist `(("." . ,(expand-file-name ".backup" user-emacs-directory)))
 backup-by-copying t
 delete-old-versions t
 kept-new-versions 6
 kept-old-versions 2
 version-control t
 desktop-save-mode 1
 delete-by-moving-to-trash t)

(setq-default
 ;; Briefly move cursor to the matching open-paren
 ;; even if it is not visible in the window.
 blink-matching-paren 'jump-offscreen

 ;; Show matching parenthesis even for comments
 blink-matching-paren-dont-ignore-comments t

 ;; Show matching parentheses even when on screen
 blink-matching-paren-on-screen t

 ;; Show column with line in the modeline
 column-number-mode t

 ;; Full comments per line
 comment-style 'indent

 ;; Always kill compilation process before starting another
 compilation-always-kill t

 ;; Save all buffers before compiling
 compilation-ask-about-save nil

 ;; TODO: Not exactly sure what this does
 compilation-context-lines t

 ;; TODO: Not exactly sure what this does
 compilation-error-screen-columns t

 ;; Scroll to the first error in the compilation buffer
 compilation-scroll-output 'first-error

 ;; Number of lines in a compilation window
 compilation-window-height 12

 ;; Ask before killing emacs
 confirm-kill-emacs 'y-or-n-p

 ;; Don't lock files, I know what I'm doing
 create-lockfiles nil

 ;; If two dired are opened with two different locations
 ;; copy command will copy from one to the other
 dired-dwim-target t

 ;; Show Keystrokes in Progress Instantly
 echo-keystrokes 0.1

 ;; Turn font lock mode for all modes that allow it
 ;; TODO: Specify a list when we'll start using tree-sitter
 font-lock-global-modes t

 ;; Never insert tabs when indenting (default is now to always use space)
 indent-tabs-mode nil

 ;; I know emacs, I really don't need the startup-screen
 inhibit-startup-screen t

 ;; Don't put anything in the scratch buffer
 initial-scratch-message nil

 ;; Move point by visual lines
 line-move-visual t

 ;; Highlight the location of the next-error in the source buffer
 next-error-highlight t

 ;; Highlight the locus indefinitely until some other locus replaces it.
 next-error-highlight-no-select t

 ;; Add a newline automatically at the end of the file upon save.
 require-final-newline t

 ;; Turn Off Cursor Alarms
 ring-bell-function 'ignore

 ;; Use the clipboard too when cutting and pasting
 select-enable-clipboard t

 ;; TODO: Not sure why I'm using it
 sentence-end-double-space nil

 ;; I don't need scroll bars
 scroll-bar-mode nil

 tab-width 2

 ;; Long lines will span on a continuation line (makes the whole line visible)
 truncate-lines nil

 ;; Save undos even when closing emacs
 undo-tree-auto-save-history t

 ;; yes or no replace by y or n everywhere
 use-short-answers t

 vc-follow-symlinks t

 ;; Flash the screen
 visible-bell nil)

(use-package server
  :demand t
  :ensure nil
  :config
  (unless (server-running-p) (server-start))
  (message "`server' loaded"))

;; Allows to repeat just one key to allow shorter key sequences
(use-package repeat
  :ensure nil
  :init (repeat-mode t)
  :config
  (setopt repeat-exit-timeout nil)
  (defun pokemacs-set-repeat-exit-timeout (list)
    (dolist (command list)
      (put command 'repeat-exit-timeout pokemacs-repeat-timeout))))

(global-prettify-symbols-mode t)
(prettify-symbols-mode)

(setq prettify-symbols-unprettify-at-point 1)

(global-auto-revert-mode t)
(auto-revert-mode t)

(show-paren-mode 1)

;; (global-display-line-numbers-mode t)

(setq save-place-forget-unreadable-files t)
(save-place-mode 1)

(delete-selection-mode t)

(when (fboundp 'global-so-long-mode)
  (global-so-long-mode))

(unless (version< emacs-version "29")
  (pixel-scroll-precision-mode t))

(add-to-list 'auto-mode-alist '("\\.in\\'" . text-mode))
(add-to-list 'auto-mode-alist '("\\.out\\'" . text-mode))
(add-to-list 'auto-mode-alist '("\\.args\\'" . text-mode))

(add-hook 'before-save-hook 'delete-trailing-whitespace)

(use-package auto-package-update
  :custom
  (auto-package-update-show-preview t)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-delete-old-version t)
  :config (message "`auto-package-update' loaded"))

(use-package no-littering
  :demand t
  :config (message "`no-littering' loaded"))
(elpaca-wait)

(auto-save-visited-mode 1)
(setq auto-save-default t)
(setq auto-save-timeout 60)
(setq auto-save-interval 200)

(require 'cl-lib)
(require 'package)
(require 'pokemacs-functions)

(defconst pokemacs-sys/win32
  (eq system-type 'windows-nt)
  "Are we running on a WinTel system?")

(defconst pokemacs-sys/linux
  (eq system-type 'gnu/linux)
  "Are we running on a GNU/Linux system?")

(defconst pokemacs-sys/mac
  (eq system-type 'darwin)
  "Are we running on a Mac system?")

(defvar pokemacs-fd-binary
  (cl-find-if #'executable-find (list "fdfind" "fd"))
  "The filename of the `fd' executable. On some distros it's 'fdfind' (ubuntu,
debian, and derivatives). On most it's 'fd'.")

(use-package gcmh
  :demand t
  :custom
  (gcmh-idle-delay 'auto)  ; default is 15s
  (gcmh-auto-idle-delay-factor 10)
  (gcmh-high-cons-threshold (* 16 1024 1024))  ; 16mb
  :config (gcmh-mode 1))

(use-package esup
  :config
  (setq esup-depth 0)
  (message "`esup' loaded"))

(use-package prescient
  :init (setq prescient-persist-mode 1)
  :config (message "`prescient' loaded"))

(use-package savehist
  :ensure nil
  :init
  (savehist-mode t)
  ;; Remember recently opened files
  (recentf-mode t)
  :custom
  (history-delete-duplicates t)
  :config
  ;; Persist 'compile' history
  (add-to-list 'savehist-additional-variables 'compile-history)
  (add-to-list 'recentf-exclude no-littering-var-directory)
  (add-to-list 'recentf-exclude no-littering-etc-directory)
  (message "`savehist' loaded"))

(defun pokemacs-wsl-specific-function ()
  "Change some values if running on WSL"
  (when (getenv "WSLENV")
    (message "setting wsl env")
    (eshell-command "xmodmap -e 'keycode 191 = space'")
    (let ((cmd-exe "/mnt/c/Windows/System32/cmd.exe")
          (cmd-args '("/c" "start")))
      (when (file-exists-p cmd-exe)
        (setq browse-url-generic-program  cmd-exe
              browse-url-generic-args     cmd-args
              browse-url-browser-function 'browse-url-generic
              search-web-default-browser 'browse-url-generic)))))

(add-hook 'after-init-hook #'pokemacs-wsl-specific-function)

(unless pokemacs-sys/win32
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8))

(use-package all-the-icons
  :if (display-graphic-p)
  :demand t
  :config
  (when use-all-the-icons
    (set-fontset-font t '(#xe3d0 . #xe909) "Material Icons")
    (set-fontset-font t '(#xe3d0 . #xe3d9) "Material Icons"))
  (message "`all-the-icons' loaded"))

(when use-all-the-icons
  (use-package all-the-icons-dired
    :if (display-graphic-p)
    :hook (dired-mode . all-the-icons-dired-mode)
    :config
    (message "`all-the-icons-dired' loaded")))

(when use-all-the-icons
  (use-package all-the-icons-completion
    :if (display-graphic-p)
    :init (all-the-icons-completion-mode)
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :config
    (message "`all-the-icons-completion' loaded")))

(unless use-all-the-icons
  (use-package nerd-icons
    :demand t
    :config
    (set-fontset-font t '(#x25d0 . #xf10d7) "Symbols Nerd Font Mono")
    (set-fontset-font t '(#xe3d0 . #xe3d9) "Material Icons")
    (message "`nerd-icons' loaded")))

(unless use-all-the-icons
  (use-package nerd-icons-dired
    :hook (dired-mode . nerd-icons-dired-mode)
    :config (message "`nerd-icons-dired' loaded")))

(unless use-all-the-icons
  (use-package nerd-icons-completion
    :after (marginalia nerd-icons)
    :hook (marginalia-mode . nerd-icons-completion-marginalia-setup)
    :config
    (nerd-icons-completion-mode)
    (message "`nerd-icons-completion' loaded")))

(use-package nerd-icons-corfu
  :demand t
  :after (nerd-icons corfu)
  :config
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter)
  ;; Optionally:
  ;; (setq nerd-icons-corfu-mapping
  ;;       '((array :style "cod" :icon "symbol_array" :face font-lock-type-face)
  ;;         (boolean :style "cod" :icon "symbol_boolean" :face font-lock-builtin-face)
  ;;         ;; ...
  ;;         (t :style "cod" :icon "code" :face font-lock-warning-face)))
  ;; Remember to add an entry for `t', the library uses that as default.
  )

(use-package ligature
  :demand t
  :config
  ;; Enable the "www" ligature in every possible major mode
  (ligature-set-ligatures 't '("www"))
  ;; Enable traditional ligature support in eww-mode, if the
  ;; `variable-pitch' face supports it
  (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
  ;; Enable all Fira Code ligatures in programming modes
  (ligature-set-ligatures
   'prog-mode '(
                "www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\" "{-" "::"
                ":::" ":=" "!!" "!=" "!==" "-}" "----" "-->" "->" "->>"
                "-<" "-<<" "-~" "#{" "#[" "##" "###" "####" "#(" "#?" "#_"
                "#_(" ".-" ".=""..<""?=" "??" ";;" "/*" "/**"
                ;; "..""..."
                "/=" "/==" "/>" "//" "///" "&&" "||" "||=" "|=" "|>" "^=" "$>"
                "++" "+++" "+>" "=:=" "==" "===" "==>" "=>" "=>>" "<="
                "=<<" "=/=" ">-" ">=" ">=>" ">>" ">>-" ">>=" ">>>" "<*"
                "<*>" "<|" "<|>" "<$" "<$>" "<!--" "<-" "<--" "<->" "<+"
                "<+>" "<=" "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<"
                "<~" "<~~" "</" "</>" "~@" "~-" "~>" "~~" "~~>" "%%" "[|" "|]"))
  ;; Enables ligature checks globally in all buffers. You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode t)
  (message "`ligature' loaded"))

(use-package ansi-color
  :ensure nil
  :hook (shell-mode . ansi-color-for-comint-mode-on)
  :config (message "`ansi-color' loaded"))

(use-package xterm-color
  :config
  (setq compilation-environment '("TERM=xterm-256color"))

  (defun my/advice-compilation-filter (f proc string)
    (funcall f proc (xterm-color-filter string)))

  (advice-add 'compilation-filter :around #'my/advice-compilation-filter))

(use-package kurecolor
  :config (message "`kurecolor' loaded"))

(use-package emojify
  :hook (after-init . global-emojify-mode)
  :config (message "`emojify' loaded"))

(use-package general
  :demand t
  :init
  (if (display-graphic-p)
      (general-unbind "C-z"))
  (general-unbind
    "C-o"
    "C-f"
    "C-x C-z"
    "M-z"
    "M-m"
    "M-l"
    "M-h"
    "M-/"
    "M-l"
    "M-f")
  (general-define-key
   [remap kill-buffer]                  'kill-current-buffer
   [remap ispell-word]                  'jinx-correct
   ;; Prefixed by C
   "C-x C-1"                 'delete-other-windows
   "C-x C-2"                 'split-window-below
   "C-x C-3"                 'split-window-right
   "C-x C-0"                 'delete-window

   "C-x &"                   'delete-other-windows
   "C-x é"                   'split-window-below
   "C-x \""                  'split-window-right
   "C-x à"                   'delete-window

   "C-x C-l"                 'toggle-truncate-lines
   "C-="                     'text-scale-increase
   "C-+"                     'text-scale-increase
   "C--"                     'text-scale-decrease
   "C-c b"                   'describe-personal-keybindings
   ;; Create new line contextualised by the previous one
   ;; (will add a comment if in comment mode for example)
   "C-<return>"              'default-indent-new-line
   ;; emacs autocompletion (not like company)
   "C-<tab>"                 'dabbrev-expand
   "C-n"                     'next-error
   "C-p"                     'previous-error

   "C-x C-o"                 'ace-window

   ;; rotate buffers and window arrangements
   "C-c r w"                 'rotate-window
   "C-c r l"                 'rotate-layout

   ;; Prefixed by M
   "M-u"                     'upcase-dwim

   "M-J"                     (lambda () (interactive) (pokemacs-resize-window t 5))
   "M-L"                     (lambda () (interactive) (pokemacs-resize-window t -5))
   "M-I"                     (lambda () (interactive) (pokemacs-resize-window nil 5))
   "M-K"                     (lambda () (interactive) (pokemacs-resize-window nil -5))
   ;; Custom comment overwriting comment-dwim key binding
   "M-;"                     'pokemacs-comment-eclipse
   "M-p"                     'backward-paragraph
   "M-<f1>"                  'kill-current-buffer
   "M-Q"                     'unfill-paragraph

   "M-+"                     'hs-toggle-hiding
   "M-*"                     'hs-show-all

   ;; Function keys
   [f3]                      'next-match
   [(shift f3)]              'prev-match
   [f4]                      'goto-line
   [f7]                      'next-error
   [f8]                      'normal-mode)
  (general-define-key
   :prefix "M-z"
   ;; Setup shorcuts for window resize width and height
   "w"                       'pokemacs-resize-window-width
   "h"                       'pokemacs-resize-window-height)
  (general-define-key
   :prefix "M-h"
   "d"                       '(hydra-dates/body :which-key "Date Utils")
   "f"                       '(hydra-flycheck/body :which-key "Flycheck")
   "g"                       '(hydra-smerge/body :which-key "Git/Smerge")
   "w"                       '(hydra-window/body :which-key "Window")
   "t"                       '(pokemacs-toggles/body :which-key "Toggles"))
  (general-def minibuffer-local-map
    "C-<tab>" 'dabbrev-expand)
  :config (message "`general' loaded"))
(elpaca-wait)

(use-package which-key
  :init (which-key-mode)
  :custom
  (which-key-separator " ")
  (which-key-prefix-prefix "+")
  :config
  (which-key-add-major-mode-key-based-replacements 'markdown-mode
    "C-c TAB" "markdown/images"
    "C-c C-a" "markdown/links"
    "C-c C-c" "markdown/process"
    "C-c C-s" "markdown/style"
    "C-c C-t" "markdown/header"
    "C-c C-x" "markdown/structure"
    "C-c m" "markdown/personal")
  (which-key-add-major-mode-key-based-replacements 'web-mode
    "C-c C-a" "web/attributes"
    "C-c C-b" "web/blocks"
    "C-c C-d" "web/dom"
    "C-c C-e" "web/element"
    "C-c C-t" "web/tags")
  (which-key-setup-side-window-bottom)
  (setq which-key-sort-order 'which-key-key-order-alpha
        which-key-side-window-max-width 0.33
        which-key-show-early-on-C-h t
        which-key-idle-delay 0.1)
  (message "`which-key' loaded"))

(use-package hydra
  :demand t
  :custom
  (hydra-default-hint nil)
  (hydra-look-for-remap t)
  :init

  (defun pokemacs-date-iso ()
    "Insert the current date, ISO format, eg. 2016-12-09."
    (interactive)
    (insert (format-time-string "%F")))

  (defun pokemacs-date-iso-with-time ()
    "Insert the current date, ISO format with time, eg. 2016-12-09T14:34:54+0100."
    (interactive)
    (insert (format-time-string "%FT%T%z")))

  (defun pokemacs-date-long ()
    "Insert the current date, long format, eg. December 09, 2016."
    (interactive)
    (insert (format-time-string "%d %B %Y")))

  (defun pokemacs-date-long-with-time ()
    "Insert the current date, long format, eg. December 09, 2016 - 14:34."
    (interactive)
    (insert (capitalize (format-time-string "%d %B %Y - %H:%M"))))

  (defun pokemacs-date-short ()
    "Insert the current date, short format, eg. 2016.12.09."
    (interactive)
    (insert (format-time-string "%Y.%m.%d")))

  (defun pokemacs-date-short-with-time ()
    "Insert the current date, short format with time, eg. 2016.12.09 14:34"
    (interactive)
    (insert (format-time-string "%Y.%m.%d %H:%M")))
  :config
  (message "`hydra' loaded"))
(elpaca-wait)

;; NOTE: hydra and posframe are required
(when use-posframe
  (use-package hydra-posframe
    :ensure (:type git :host github :repo "Ladicle/hydra-posframe")
    :hook (after-init . hydra-posframe-mode)))

(use-package major-mode-hydra
  :ensure t
  :demand t
  :general
  ("M-h h" '(major-mode-hydra :which-key "Major mode"))
  ("M-h m" '(pokemacs-major-mode-hydra-custom :which-key "Custom mode"))
  :custom
  (major-mode-hydra-invisible-quit-key "q")
  :config
  (defun pokemacs-major-mode-hydra-custom (mode)
    (interactive
     (list
      (intern
       (completing-read
        "Describe custom theme: "
        (mapcar #'symbol-name
                (buffer-local-value 'local-minor-modes (current-buffer)))))))
    (major-mode-hydra-dispatch mode))

  (defun major-mode-hydra-dispatch (mode)
    "Summon the hydra for given MODE (if there is one)."
    (let ((orig-mode mode))
      (catch 'done
        (while mode
          (let ((hydra (major-mode-hydra--body-name-for mode)))
            (when (fboundp hydra)
              (call-interactively hydra)
              (throw 'done t)))
          (setq mode (or (get mode 'derived-mode-parent) 'root-mode))))))

  (setq major-mode-hydra-title-generator
        '(lambda (mode)
           (let ((icon (all-the-icons-icon-for-mode mode :v-adjust 0.05)))
             (if (stringp icon)
                 (s-concat "\n"
                           (s-repeat 7 " ")
                           icon
                           " "
                           (s-capitalize (symbol-name mode))
                           " commands")
               (s-concat "\n"
                         (s-repeat 10 " ")
                         (s-capitalize (symbol-name mode))
                         " commands"))))))
(elpaca-wait)

(use-package pretty-hydra
  :ensure nil
  :config
  (pretty-hydra-define
    hydra-dates (:color teal :title "Dates" :quit-key "q")
    ("Insert"
     (("d" pokemacs-date-short "short")
      ("i" pokemacs-date-iso "iso")
      ("l" pokemacs-date-long "long"))

     "Insert with time"
     (("D" pokemacs-date-short-with-time "short")
      ("I" pokemacs-date-iso-with-time "iso")
      ("L" pokemacs-date-long-with-time "long")))))

(use-package keycast
  :commands keycast-mode
  :config
  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line (fix for use with doom-mode-line)."
    :global t
    (if keycast-mode
        (add-hook 'pre-command-hook 'keycast--update t)
      (remove-hook 'pre-command-hook 'keycast--update)))
  (add-to-list 'global-mode-string '("" keycast-mode-line))
  (message "`keycast' loaded"))

(use-package selected
  :init
  (require 'hide-region)
  (selected-global-mode)
  :general
  (:keymaps 'selected-keymap
            ;; "C-?"                     'hydra-selected/body
            "<"                       'mc/mark-previous-like-this
            ">"                       'mc/mark-next-like-this
            "C-<"                     'mc/unmark-previous-like-this
            "C->"                     'mc/unmark-next-like-this
            "M-<"                     'mc/skip-to-previous-like-this
            "M->"                     'mc/skip-to-next-like-this
            "C-c >"                   'mc/edit-lines
            "M-c"                     'capitalize-dwim
            "M-d"                     'downcase-dwim
            "M-u"                     'upcase-dwim
            "C-f"                     'fill-region
            "C-q"                     'selected-off
            "C-c s r"                 'reverse-region
            "C-c s s"                 'sort-lines
            "C-c s w"                 'pokemacs-sort-words
            "C-<return>"              'hide-region-hide
            "C-p"                     '(hide-region-pin :which-key "Pins the selected region on top of the current window"))
  :config (message "`selected' loaded"))

(use-package god-mode
  :disabled
  :init
  (setq god-mode-enable-function-key-translation nil)
  :config
  (defun my-god-mode-update-modeline ()
    (cond (god-local-mode
           (progn
             (set-face-background 'mode-line "#e9e2cb")
             (set-face-foreground 'mode-line "black")
             (set-face-background 'mode-line-inactive "#e9e2cb")
             (set-face-foreground 'mode-line-inactive "black")))
          (t (progn
               (set-face-background 'mode-line "#0a2832")
               (set-face-foreground 'mode-line "white")
               (set-face-background 'mode-line-inactive "#0a2832")
               (set-face-foreground 'mode-line-inactive "white")))))
  (add-hook 'god-mode-enabled-hook #'my-god-mode-update-modeline)
  (add-hook 'god-mode-disabled-hook #'my-god-mode-update-modeline)
  (setq god-exempt-major-modes nil)
  (setq god-exempt-predicates nil)
  :general
  (("<escape>"                'god-mode-all)
   ("²"                       'god-mode-all)
   ("C-²"                     'god-mode-all)))

(use-package emacs-lisp-mode
  :ensure nil

  :mode-hydra
  ((:color pink :quit-key "q")
   ("Eval"
    (("b" eval-buffer "buffer")
     ("e" eval-defun "defun")
     ("r" eval-region "region"))
    "REPL"
    (("I" ielm "ielm"))
    "Doc"
    (("f" describe-function "function")
     ("v" describe-variable "variable")))))

(use-package root-mode
  :ensure nil
  :mode-hydra
  ((:color pink :quit-key "q")
   ("Doc"
    (("i" info-lookup-symbol "info lookup")))))

(defun pokemacs-unpropertize-kill-ring ()
  (setq kill-ring (mapcar 'substring-no-properties kill-ring)))

(add-hook 'kill-emacs-hook #'pokemacs-unpropertize-kill-ring)

(use-package emacs
  :demand t
  :ensure nil
  :general
  (:keymaps 'query-replace-map
            "M-c" 'pokemacs-toggle-case
            "c"   'pokemacs-toggle-case)
  :config

  ;; (defvar pokemacs-progress-reporter--pulse-characters ["a" "b" "c" "d"]
  ;;   "Characters to use for pulsing progress reporters.")

  ;; (defun progress-reporter-do-update (reporter value &optional suffix)
  ;;   (let* ((parameters   (cdr reporter))
  ;;          (update-time  (aref parameters 0))
  ;;          (min-value    (aref parameters 1))
  ;;          (max-value    (aref parameters 2))
  ;;          (text         (aref parameters 3))
  ;;          (enough-time-passed
  ;;           ;; See if enough time has passed since the last update.
  ;;           (or (not update-time)
  ;;               (when (time-less-p update-time nil)
  ;; 	              ;; Calculate time for the next update
  ;; 	              (aset parameters 0 (+ update-time (aref parameters 5)))))))
  ;;     (cond ((and min-value max-value)
  ;;            ;; Numerical indicator
  ;;            (let* ((one-percent (/ (- max-value min-value) 100.0))
  ;; 	                (percentage  (if (= max-value min-value)
  ;; 			                             0
  ;; 			                           (truncate (/ (- value min-value)
  ;; 				                                      one-percent)))))
  ;;              ;; Calculate NEXT-UPDATE-VALUE.  If we are not printing
  ;;              ;; message because not enough time has passed, use 1
  ;;              ;; instead of MIN-CHANGE.  This makes delays between echo
  ;;              ;; area updates closer to MIN-TIME.
  ;;              (setcar reporter
  ;; 	                   (min (+ min-value (* (+ percentage
  ;; 				                                     (if enough-time-passed
  ;; 					                                       ;; MIN-CHANGE
  ;; 					                                       (aref parameters 4)
  ;; 				                                       1))
  ;; 				                                  one-percent))
  ;; 		                      max-value))
  ;;              (when (integerp value)
  ;;                (setcar reporter (ceiling (car reporter))))
  ;;              ;; Print message only if enough time has passed
  ;;              (when enough-time-passed
  ;;                (if suffix
  ;;                    (aset parameters 6 suffix)
  ;;                  (setq suffix (or (aref parameters 6) "")))
  ;;                (if (> percentage 0)
  ;;                    (message "%s%d%% %s" text percentage suffix)
  ;;                  (message "%s %s" text suffix)))))
  ;;           ;; Pulsing indicator
  ;;           (enough-time-passed
  ;;            (when (and value (not suffix))
  ;;              (setq suffix value))
  ;;            (if suffix
  ;;                (aset parameters 6 suffix)
  ;;              (setq suffix (or (aref parameters 6) "")))
  ;;            (let* ((index (mod (1+ (car reporter)) 4))
  ;;                   (message-log-max nil)
  ;;                   (pulse-char (aref pokemacs-progress-reporter--pulse-characters
  ;;                                     index)))
  ;;              (setcar reporter index)
  ;;              (message "%s %s %s" text pulse-char suffix))))))
  ;; (defun test-progress ()
  ;;   (interactive)
  ;;   (let ((progress-reporter
  ;;          (make-progress-reporter "Collecting mana for Emacs...")))
  ;;     (dotimes (k 500)
  ;;       (sit-for 0.01)
  ;;       (progress-reporter-update progress-reporter k))
  ;;     (progress-reporter-done progress-reporter)))
  ;; use current region as first search
  (defadvice isearch-mode (around isearch-mode-default-string (forward &optional regexp op-fun recursive-edit word-p) activate)
    (if (and transient-mark-mode mark-active (not (eq (mark) (point))))
        (progn
          (isearch-update-ring (buffer-substring-no-properties (mark) (point)))
          (deactivate-mark)
          ad-do-it
          (if (not forward)
              (isearch-repeat-backward)
            (goto-char (mark))
            (isearch-repeat-forward)))
      ad-do-it))
  (defun pokemacs-toggle-case ()
    (interactive)
    (setq case-fold-search (not case-fold-search))
    (message "toggled case-fold-search to %s" case-fold-search))
  (defconst query-replace-help
    "Type \\`SPC' or \\`y' to replace one match, Delete or \\`n' to skip to next,
  \\`RET' or \\`q' to exit, Period to replace one match and exit,
  \\`,' to replace but not move point immediately,
  \\`C-r' to enter recursive edit (\\[exit-recursive-edit] to get out again),
  \\`C-w' to delete match and recursive edit,
  \\`C-l' to clear the screen, redisplay, and offer same replacement again,
  \\`!' to replace all remaining matches in this buffer with no more questions,
  \\`^' to move point back to previous match,
  \\`u' to undo previous replacement,
  \\`U' to undo all replacements,
  \\`e' to edit the replacement string.
  \\`E' to edit the replacement string with exact case.
  In multi-buffer replacements type \\`Y' to replace all remaining
  matches in all remaining buffers with no more questions,
  \\`N' to skip to the next buffer without replacing remaining matches
  in the current buffer.
  \\`c' or \\`M-c' to toggle case sensitivity"
    "Help message while in `query-replace'.")
  (message "`emacs' config loaded"))

(setq-default cursor-in-non-selected-windows t) ; Hide the cursor in inactive windows

(use-package nlinum
  :init (global-nlinum-mode 1)
  :config
  (setq nlinum--width (length (number-to-string (count-lines (point-min) (point-max)))))
  (message "`nlinum' loaded"))

(use-package cheatsheet
  :config (message "`cheatsheet' loaded"))

(use-package crux
  :init
  (define-prefix-command 'pokemacs-crux-map nil "Crux-")
  :general
  ("M-m" 'pokemacs-crux-map)
  ("C-a" 'crux-move-beginning-of-line)
  ("C-x 4 t" 'crux-transpose-windows)
  ("C-x K" 'crux-kill-other-buffers)
  ("C-k" 'crux-smart-kill-line)
  (:keymaps 'pokemacs-crux-map
            "w" '(crux-view-url :which-key "Open a new buffer containing the contents of URL.")
            "o" '(crux-open-with :which-key "Open visited file in default external program.")
            "e" '(crux-sudo-edit :which-key "Edit currently visited file as root.")
            "i" '(crux-insert-date :which-key "Insert a timestamp according to locale's date and time format.")
            "t" '(crux-transpose-windows :which-key "Transpose the buffers shown in two windows.")
            "j" '(crux-top-join-line :which-key "Join the current line with the line beneath it.")
            "u" '(upcase-dwim :which-key "upcase region if a region is active or word at point.")
            "d" '(downcase-dwim :which-key "downcase region if a region is active or word at point.")
            "c" '(capitalize-dwim :which-key "capitalize region if a region is active or word at point.")
            "r" '(crux-recompile-init :which-key "Byte-compile all your dotfiles again.")
            "k" '(crux-smart-kill-line :which-key "Kill to the end of the line and kill whole line on the next call.")
            "M-k" '(crux-kill-line-backwards :which-key "Kill line backwards and adjust the indentation.")
            "a" '(crux-move-beginning-of-line :which-key "Move point back to indentation/beginning (toggle) of line.")
            "s" '(crux-ispell-word-then-abbrev :which-key "Call `ispell-word', then create an abbrev for it.")
            )
  :config
  (crux-with-region-or-buffer indent-region)
  (crux-with-region-or-buffer untabify)
  (crux-with-region-or-point-to-eol kill-ring-save)
  (defalias 'rename-file-and-buffer #'crux-rename-file-and-buffer)
  (message "`crux' loaded"))

(use-package delete-block
  :load-path "lisp/"
  :ensure nil
  :general
  ("C-d"                     'delete-block-forward)
  ("C-<DEL>"           'delete-block-backward)
  ("M-<DEL>"           'delete-block-backward)
  :config (message "`delete-block' loaded"))

(use-package discover-my-major
  :general ("C-h C-m" 'discover-my-major)
  :config (message "`discover-my-major' loaded"))

(use-package helpful
  :general
  ([remap describe-key] 'helpful-key)
  ([remap describe-function] 'helpful-callable)
  ([remap describe-variable] 'helpful-variable)
  ([remap describe-symbol] 'helpful-symbol)
  ("C-h F" 'helpful-function)
  ("C-h C" 'helpful-command))

(use-package easy-kill
  :general
  ([remap kill-ring-save] 'easy-kill)
  ([remap mark-sexp] 'easy-mark)
  :config
  (message "`easy-kill loaded"))

(use-package json
  :ensure nil
  :demand t
  :config
  (defun get-secrets-config-value (key)
    "Return the value of the json file secrets for key"
    (cdr (assoc key (json-read-file "~/.secrets/secrets.json"))))
  (message "`json' loaded"))

(use-package lsp-ltex
  :hook (text-mode . (lambda ()
                       (require 'lsp-ltex)
                       (lsp-deferred)))
  :init (setq lsp-ltex-version "16.0.0")
  :config (setq lsp-ltex-language pokemacs-dict))

(use-package jinx
  ;; :ensure-system-package libenchant-2-dev
  :hook (emacs-startup . global-jinx-mode)
  :init
  (defun pokemacs-change-dict ()
    (interactive)
    (pokemacs-customize-my-custom-variable "pokemacs-dict")
    (setq jinx-languages pokemacs-dict)
    (setq lsp-ltex-language pokemacs-dict))
  :general
  (:keymaps 'jinx-overlay-map
            "RET" 'jinx-correct)
  ("M-$"  'jinx-correct)
  ("C-M-$" 'pokemacs-change-dict)
  :config
  (setq jinx-languages pokemacs-dict)
  ;; Temporary setting tree-sitter faces for jinx-include-faces
  ;; When tuareg has a proper treesitter mode this will become useless
  (let* ((prog-faces (alist-get 'prog-mode jinx-include-faces))
         (new-prog-faces (cl-revappend prog-faces '(tree-sitter-hl-face:doc tree-sitter-hl-face:string tree-sitter-hl-face:comment))))
    (setf (alist-get 'prog-mode jinx-include-faces) new-prog-faces)))

(use-package highlight-symbol
  :demand t
  :hook (prog-mode . highlight-symbol-nav-mode)
  :general
  (:keymaps 'highlight-symbol-nav-mode-map
            "M-n" nil
            "M-p" nil)
  ("M-<f6>"       '(highlight-symbol :which-key "highlight the symbol at point"))
  ("M-S-<down>"   '(highlight-symbol-next :which-key "go to the next symbol"))
  ("M-S-<up>"     '(highlight-symbol-prev :which-key "go to the previous symbol"))
  :config
  (message "`highlight-symbol' loaded"))

(use-package multiple-cursors
  :general
  ("C-c n" 'mc/mark-next-like-this)
  ("C-c p" 'mc/mark-previous-like-this)
  ("C-c a" 'mc/mark-all-like-this)
  :config (message "`a loaded"))

(use-package hide-region
  :load-path "lisp/"
  :ensure nil
  :commands hide-region-pin
  :general
  ("C-c r u" 'hide-region-unpin)
  :config (message "`hide-region loaded"))

(use-package hide-mode-line
  :config (message "`hide-mode-line loaded"))

(use-package vlf
  :demand t
  :config (require 'vlf-setup))

(use-package vundo
  :commands (vundo)
  :general
  ("C-x u" 'vundo)
  :custom
  (vundo-glyph-alist vundo-unicode-symbols)
  (vundo-compact-display t))

(use-package whitespace
  :ensure nil
  :hook
  (prog-mode . whitespace-mode)
  (text-mode . whitespace-mode)
  :custom
  (whitespace-style '(face empty indentation::space tab trailing))
  :config (message "`whitespace loaded"))

(define-minor-mode locked-window-buffer-mode
  "Make the current window always display this buffer."
  :lighter "locked"
  (set-window-dedicated-p (selected-window) locked-window-buffer-mode))

(use-package locked-window-buffer-mode
  :ensure nil
  :general ("M-l l"    'locked-window-buffer-mode))

(use-package dired
  :ensure nil
  :general
  (:keymaps 'dired-mode-map
            "DEL" 'dired-up-directory))

(use-package dirvish
  :commands dirvish-find-entry-a dirvish-dired-noselect-a
  :init
  (advice-add #'dired-find-file :override #'dirvish-find-entry-a)
  (advice-add #'dired-noselect :around #'dirvish-dired-noselect-a)

  (defun pokemacs-dired-update-mode-line-height-h ()
    (when-let (height (bound-and-true-p doom-modeline-height))
      (setq dirvish-mode-line-height height
            dirvish-header-line-height height)))
  :hook (dired-mode . pokemacs-dired-update-mode-line-height-h)
  :config
  ;; From doomemacs/blob/master/modules/emacs/dired/config.el#L84C1-L89C35
  ;; Don't recycle sessions. We don't want leftover buffers lying around,
  ;; especially if users are reconfiguring Dirvish or trying to recover from an
  ;; error. It's too easy to accidentally break Dirvish (e.g. by focusing the
  ;; header window) at the moment, or get stuck in a focus loop with the buried
  ;; buffers. Starting from scratch isn't even that expensive, anyway.
  (setq dirvish-reuse-session nil)
  (setq dirvish-attributes '(file-size)
        dirvish-mode-line-format
        '(:left (sort file-time symlink) :right (omit yank index)))
  (setq dirvish-subtree-always-show-state t)
  (pokemacs-appendq! dirvish-attributes '(nerd-icons subtree-state))
  (setq dirvish-hide-details '(dirvish dirvish-side)
        dirvish-hide-cursor '(dirvish dirvish-side))
  (dirvish-override-dired-mode))

(use-package dwim-shell-command
  :ensure (dwim-shell-command :files (:defaults "*.el"))
  :general
  ([remap shell-command]   'dwim-shell-command)
  (:keymaps 'dired-mode-map
            [remap dired-do-async-shell-command] 'dwim-shell-command
            [remap dired-do-shell-command]       'dwim-shell-command
            [remap dired-smart-shell-command]    'dwim-shell-command)
  :config (require 'dwim-shell-commands))

(use-package transient)

(use-package magit
  :general
  ("C-c g"  'magit-file-dispatch)
  ("M-v"    '(:keymap magit-mode-map :package magit :wk "Magit-:"))
  ("M-n"    'pokemacs-smerge-or-flycheck-next)
  (:keymaps 'smerge-mode-map
            "M-m"                 'smerge-keep-mine
            "M-o"                 'smerge-keep-other)
  (:keymaps 'magit-mode-map
            "g"             'magit-status
            "G"             'git-messenger:popup-message
            "M-g"           'magit-dispatch)
  :init
  (pretty-hydra-define
   hydra-smerge (:title "Smerge" :hint nil :quit-key "q")
   (
    "Resolve Conflict"
    (("m" smerge-keep-upper "Keep Upper")
     ("o" smerge-keep-lower "Keep Lower")
     ("a" smerge-keep-all "Keep All")
     ("r" smerge-resolve "Auto")
     ("e" smerge-ediff "Ediff"))

    "Navigation"
    (("n" smerge-vc-next-conflict "Next")
     ("p" smerge-prev "Previous")
     ("s" smerge-start-session "Start"))

    "Utility"
    (("c" git-messenger:popup-message "Commit at point M-v G"))))
  :config
  (setq magit-auto-revert-mode t)
  (setq magit-auto-revert-immediately t)
  (defun pokemacs-smerge-or-flycheck-next ()
    (interactive)
    (let (files (vc-git-conflicted-files default-directory))
      (if (null files)
          (flycheck-next-error)
        (smerge-vc-next-conflict))))
  (message "`magit' loaded"))

(when use-magit-todos
  (use-package magit-todos
    :hook (magit . magit-todos)
    :config
    (setq magit-todos-keywords-list (-mapcat (lambda (assoc) (list (car assoc))) hl-todo-keyword-faces))
    (message "`magit-todos' loaded")))

(use-package hl-todo
  :ensure (:depth nil)
  :init (global-hl-todo-mode 1)
  :config (message "`hl-todo' loaded"))

(use-package git-messenger
  :config
  (setq git-messenger:show-detail t
        git-messenger:use-magit-popup t)
  (message "`git-messenger' loaded"))

(use-package git-timemachine
  :config (message "`git-timemachine' loaded"))

(use-package git-modes
  :config (message "`git-modes' loaded"))

(use-package code-review
  :disabled t
  :config
  (setq code-review-download-dir (no-littering-expand-var-file-name "backups/"))
  (message "`code-review' loaded"))

(use-package ghub
  :config (message "`ghub' loaded"))

(use-package ox-pandoc)

(use-package ox
  :ensure nil
  :mode ("\\.org\\'" . org-mode)
  :init
  (defun pokemacs-filter-timestamp (trans back _comm)
    "Remove <> around time-stamps."
    (pcase back
      (`html
       (replace-regexp-in-string "&[lg]t;" "" trans))
      (`latex
       (replace-regexp-in-string "[<>]" "" trans))))

  :config
  (add-to-list 'org-export-filter-timestamp-functions #'pokemacs-filter-timestamp)
  (message "`ox' loaded"))

(use-package mixed-pitch
  :config (message "`mixed-pitch' loaded"))

(use-package ob-rust)

(use-package ob-racket
  :ensure (:type git :host github :repo "hasu/emacs-ob-racket"))

(use-package org
  :mode ("\\.org\\'" . org-mode)
  :hook
  (org-mode . mixed-pitch-mode)
  (org-mode . pokemacs-org-mode-hook)
  :general
  ("M-o" 'pokemacs-org-map)
  ("C-x C-p" 'pokemacs-org-compile-latex-and-update-other-buffer)
  ("C-c o l" 'pokemacs-logger)
  (:keymaps 'pokemacs-org-map
            "l"                       'org-store-link
            "a"                       'org-agenda
            "c"                       'org-capture)
  (:keymaps 'org-mode-map
            "M-j"                     'org-goto
            "C-c C-a"                 nil
            "C-<return>"              'org-meta-return
            "M-C-<return>"            'org-insert-heading-respect-content)
  (:keymaps 'org-src-mode-map
            "C-c C-c"                 'org-edit-src-exit)

  :init
  ;; Load personal configuration for org mode
  (add-hook 'elpaca-after-init-hook
            (lambda ()
              (let ((file (expand-file-name "~/.secrets/org.el")))
                (when (file-exists-p file)
                  (load-file file)
                  (message "%S loaded" file)))))
  (general-unbind org-mode-map "M-h")
  (defun pokemacs-logger ()
    (interactive)
    "Print logger"
    (let ((line (number-to-string (line-number-at-pos))))
      (kill-new (concat buffer-file-name "::" line))))

  (defun pokemacs-org-mode-hook ()
    (let ((oldmap (cdr (assoc 'lsp-mode minor-mode-map-alist)))
          (newmap (make-sparse-keymap)))
      (set-keymap-parent newmap oldmap)
      (define-key newmap (kbd "C-c C-l") 'org-insert-link)
      (make-local-variable 'minor-mode-overriding-map-alist)
      (push `(lsp-mode . ,newmap) minor-mode-overriding-map-alist)))

  (setq org-list-allow-alphabetical t)
  ;; If you don't want the agenda in french you can comment the following
  ;; expression. You can even set it to your preferred language
  ;; https://www.emacswiki.org/emacs/CalendarLocalization#toc16
  (setq calendar-week-start-day 1
        calendar-day-name-array ["Dimanche" "Lundi" "Mardi" "Mercredi"
                                 "Jeudi" "Vendredi" "Samedi"]
        calendar-month-name-array ["Janvier" "Février" "Mars" "Avril" "Mai"
                                   "Juin" "Juillet" "Août" "Septembre"
                                   "Octobre" "Novembre" "Décembre"])

  (defun pokemacs-org-compile-latex-and-update-other-buffer ()
    "Has as a premise that it's run from an org-mode buffer and the
               other buffer already has the PDF open"
    (interactive)
    (org-latex-export-to-pdf)
    (pokemacs-update-other-buffer))
  :custom
  ;; Change this value to point to where your org files are
  (org-directory "~/org/")
  ;; Babel
  (org-confirm-babel-evaluate nil)
  (org-insert-heading-respect-content nil)
  (org-special-ctrl-a/e t)
  (org-src-fontify-natively t)
  (org-src-tab-acts-natively t)
  (org-hide-block-startup t)
  ;; Rest
  (org-ellipsis " ▾")
  (org-startup-indented t)
  (org-adapt-indentation nil)
  (org-agenda-span 'week)
  (org-agenda-start-day "1d")
  (org-agenda-start-on-weekday nil)
  (org-agenda-start-with-log-mode t)
  (org-cycle-separator-lines -1)
  (org-fontify-done-headline t)
  (org-footnote-auto-adjust t)
  (org-hide-emphasis-markers t)
  (org-hide-leading-stars nil)
  (org-hide-macro-markers t)
  (org-image-actual-width '(300))
  (org-image-align 'center)
  (org-latex-compiler "latexmk")
  (org-log-done 'time)
  (org-odd-levels-only nil)
  (org-pretty-entities t)
  (org-src-fontify-natively t)
  (org-src-tab-acts-natively t)
  (org-startup-truncated nil)
  (org-startup-with-inline-images t)
  (org-support-shift-select 'always)
  (org-roam-v2-ack t) ; anonying startup message

  :config
  ;; TODO states
  (setq org-todo-keywords
        '((sequence "TODO(t)" "PLANNING(p)" "IN-PROGRESS(i@/!)" "VERIFYING(v!)" "BLOCKED(b@)"  "|" "DONE(d!)" "OBE(o@!)" "WONT-DO(w@/!)" )
          ))
  (define-prefix-command 'pokemacs-org-map nil "Org-")
  (defun transform-square-brackets-to-round-ones(string-to-transform)
    "Transforms [ into ( and ] into ), other chars left unchanged."
    (concat
     (mapcar #'(lambda (c) (if (equal c ?\[) ?\( (if (equal c ?\]) ?\) c))) string-to-transform)))
  (customize-set-value 'org-latex-with-hyperref nil)
  (add-to-list 'org-latex-default-packages-alist "\\PassOptionsToPackage{hyphens}{url}")
  (setq org-image-actual-width nil)
  (defun org-mode-<>-syntax-fix (start end)
    "Change syntax of characters ?< and ?> to symbol within source code blocks."
    (let ((case-fold-search t))
      (when (eq major-mode 'org-mode)
        (save-excursion
          (goto-char start)
          (while (re-search-forward "<\\|>" end t)
            (when (save-excursion
                    (and
                     (re-search-backward "[[:space:]]*#\\+\\(begin\\|end\\)_src\\_>" nil t)
                     (string-equal (downcase (match-string 1)) "begin")))
              ;; This is a < or > in an org-src block
              (put-text-property (point) (1- (point))
                                 'syntax-table (string-to-syntax "_"))))))))

  (defun org-setup-<>-syntax-fix ()
    "Setup for characters ?< and ?> in source code blocks.
            Add this function to `org-mode-hook'."
    (setq syntax-propertize-function 'org-mode-<>-syntax-fix)
    (syntax-propertize (point-max)))

  (add-hook 'org-mode-hook #'org-setup-<>-syntax-fix)

  (setq org-agenda-custom-commands
        '(("r" "Rendez-vous" agenda* "Rendez-vous du mois"
           ((org-agenda-span 'month)
            (org-agenda-show-all-dates nil)))))
  (calendar-set-date-style 'iso)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (emacs-lisp . t)
     (latex . t)
     (ocaml . t)
     (racket . t)
     (rust . t)
     (shell . t)))
  (add-hook 'org-mode-hook
            (lambda ()
              (push '("- [ ]" . "") prettify-symbols-alist)
              (push '("+ [ ]" . "") prettify-symbols-alist)
              (push '("* [ ]" . "") prettify-symbols-alist)
              (push '("- [X]" . "") prettify-symbols-alist)
              (push '("+ [X]" . "") prettify-symbols-alist)
              (push '("* [X]" . "") prettify-symbols-alist)
              (push '("- [-]" . "") prettify-symbols-alist)
              (push '("+ [-]" . "") prettify-symbols-alist)
              (push '("* [-]" . "") prettify-symbols-alist)
              (prettify-symbols-mode)))
  (setq org-capture-templates
        `(
          ("t" "Task" entry (file+headline ,(concat org-directory "agenda.org") "Calendrier")
           "* TODO %?\n  %u\n  %a")
          ("s" "Scheduled" entry (file+headline ,(concat org-directory "agenda.org") "Calendrier")
           "* TODO %?\n SCHEDULED: %^t \n %a")
          ("p" "Protocol" entry (file+headline ,(concat org-directory "notes.org") "Inbox")
           "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
          ("L" "Protocol Link" entry (file+headline ,(concat org-directory "notes.org") "Inbox")
           "* %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n")))
  (message "`org-mode' loaded"))

;; (require 'org-protocol)

(use-package org-modern
  :after org
  :init (global-org-modern-mode)
  :custom
  (org-modern-star '("" "" "" "" "" "" ""))
  (org-modern-progress '("○" "◔" "◐" "◕" "●"))
  (org-modern-block-fringe 3)
  :config
  (custom-theme-set-faces
   'user
   '(org-modern-statistics ((t (:height 1.6)))))
  (message "`org-modern' loaded"))

(use-package org-auto-tangle
  :hook (org-mode . org-auto-tangle-mode)
  :config (message "`org-auto-tangle' loaded"))

(use-package org-ref
  :disabled
  :after org
  :init
  (setq org-ref-completion-library 'org-ref-ivy-cite)
  ;; :custom
  ;; (org-latex-pdf-process (list "latexmk -xelatex -shell-escape -bibtex -f -pdf %f"))
  )

(use-package org-inline-pdf
  :ensure-system-package pdf2svg
  :hook (org-mode . org-inline-pdf-mode)
  :config (message "`org-inline-pdf' loaded"))

(use-package calfw
  :ensure (calfw :files ("calfw-org.el" "calfw.el"))
  :config
  (setq cfw:fchar-junction ?╋
        cfw:fchar-vertical-line ?┃
        cfw:fchar-horizontal-line ?━
        cfw:fchar-left-junction ?┣
        cfw:fchar-right-junction ?┫
        cfw:fchar-top-junction ?┯
        cfw:fchar-top-left-corner ?┏
        cfw:fchar-top-right-corner ?┓))

(use-package calfw-org
  :after calfw
  :ensure nil
  :init
  (define-prefix-command 'pokemacs-calfw-map nil "Cal-")
  :general
  ("M-C" 'pokemacs-calfw-map)
  (:keymaps 'pokemacs-calfw-map
            "c" 'cfw:open-calendar-buffer
            "o" 'cfw:open-org-calendar)
  (:keymaps 'cfw:calendar-mode-map
            "RET" 'cfw:org-open-agenda-day)
  :custom
  (cfw:org-capture-template
   `("c" "calfw2org" entry (file+headline ,(concat org-directory "agenda.org") "Calendrier")
     "* %?\nSCHEDULED: %(cfw:org-capture-day)" :empty-lines 1))
  :config

  (setq cfw:org-overwrite-default-keybinding t)

  (defun cfw:org-capture-day ()
    (with-current-buffer  (get-buffer-create cfw:calendar-buffer-name)
      (let ((pos (cfw:cursor-to-nearest-date)))
        (concat "<"
                (format-time-string  "%Y-%m-%d %a 09:00"
                                     (encode-time 0 0 0
                                                  (calendar-extract-day pos)
                                                  (calendar-extract-month pos)
                                                  (calendar-extract-year pos)))
                ">"))))
  (message "`calfw-org' loaded"))

;; The request can be wrong depending on Google updates, evaluate this:
;; (concat org-gcal-auth-url
;;         "?client_id=" (url-hexify-string org-gcal-client-id)
;;         "&response_type=code"
;;         "&redirect_uri=" (url-hexify-string "urn:ietf:wg:oauth:2.0:oob")
;;         "&scope=" (url-hexify-string org-gcal-resource-url))

(when use-gcal
  (use-package plstore
    :ensure nil
    :custom
    (plstore-cache-passphrase-for-symmetric-encryption t)
    :config
    (add-to-list 'plstore-encrypt-to (get-secrets-config-value 'org-gcal-client-id)))

  (use-package org-gcal
    :custom
    (org-gcal-client-id (get-secrets-config-value 'org-gcal-client-id))
    (org-gcal-client-secret (get-secrets-config-value 'org-gcal-client-secret))
    (org-gcal-fetch-file-alist
     `(
       ;; (,(get-secrets-config-value 'calendar-company) . "~/org/calendar_company.org")
       (,(get-secrets-config-value 'calendar-user) . "~/org/calendar_user.org")))
    (message "`org-gcal' loaded")))

(use-package org-super-agenda
  :config
  (setq org-super-agenda-groups
        '(;; Each group has an implicit Boolean OR operator between its selectors.
          (:name "Rendez-vous"  ; Optionally specify section name
                 :time-grid t  ; Items that appear on the time grid
                 )
          ;; After the last group, the agenda will display items that didn't
          ;; match any of these groups, with the default order position of 99
          ))
  (org-super-agenda-mode)
  (when use-org-agenda-startup (org-agenda nil "a"))
  (message "`org-super-agenda' loaded"))

(use-package org-appear
  :after org
  :ensure (org-appear :host github :repo "awth13/org-appear" :branch "org-9.7-fixes")
  :hook (org-mode . (lambda () (org-appear-mode 1)))
  :config
  (setq org-appear-autolinks t)
  (setq org-appear-autoemphasis t)
  (message "`org-appear loaded"))

(when use-org-roam
  (use-package org-roam
    :after org
    :custom
    (org-roam-directory (file-truename "~/org/org-roam"))
    :general
    (:keymaps 'pokemacs-org-map
              "r" 'org-roam-buffer-toggle
              "f" 'org-roam-node-find
              "g" 'org-roam-graph
              "i" 'org-roam-node-insert
              "c" 'org-roam-capture
              ;; Dailies
              "j" 'org-roam-dailies-capture-today)
    :config
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)
    (setq org-roam-capture-templates
          '(
            ("d" "default" plain
             "%?"
             :if-new (file+head "defaut/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :defaut:\n#+date: %U\n")
             :unnarrowed t)
            ("b" "livre" plain
             "\n* Source\n\nAuteur: %^{Author}\nTitre: ${title}\nAnnée: %^{Year}\n\n* Résumé\n\n%?"
             :if-new (file+head "art/livre/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :art::livre:\n#+date: %U\n")
             :unnarrowed t)
            ("b" "film" plain
             "\n* Source\n\nRéalisateur: %^{Author}\nTitre: ${title}\nAnnée: %^{Year}\n\n* Résumé\n\n%?"
             :if-new (file+head "art/cinema/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :art::film:\n#+date: %U\n")
             :unnarrowed t)
            ("i" "informatique" plain "%?"
             :if-new
             (file+head "science/informatique/%<%Y%m%d%H%M%S>-${slug}.org.org" "#+title: ${title}\n#+filetags: :informatique:\n#+date: %U\n")
             :immediate-finish t
             :unnarrowed t)
            ("l" "langage" plain
             "* Characteristics\n\n- Famille: %?\n- Inspirations: \n\n* Référence:\n\n"
             :if-new (file+head "science/informatique/langages/${title}.org" "#+title: ${title}\n#+filetags: :langage:\n#+date: %U\n")
             :unnarrowed t)
            ("p" "projet" plain
             "* Objectifs\n\n%?\n\n* Tâches\n\n** TODO Ajouter de nouvelles tâches\n\n* Dates\n\n"
             :if-new (file+head "projets/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :projet:")
             :unnarrowed t)
            ("s" "sciences" plain "%?"
             :if-new
             (file+head "sciences/${title}.org" "#+title: ${title}\n#+filetags: :sciences:\n#+filetags: :science:#+date: %U\n")
             :immediate-finish t
             :unnarrowed t)))
    (cl-defmethod org-roam-node-type ((node org-roam-node))
      "Return the TYPE of NODE."
      (condition-case nil
          (file-name-nondirectory
           (directory-file-name
            (file-name-directory
             (file-relative-name (org-roam-node-file node) org-roam-directory))))
        (error "")))
    (setq org-roam-node-display-template
          (concat "${type:15} ${title:*} " (propertize "${tags:10}" 'face 'org-tag)))


    ;; If using org-roam-protocol
    (require 'org-roam-protocol)
    (message "`org-roam' loaded"))

  (use-package org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t)
    (message "`org-roam-ui' loaded")))

(use-package org-make-toc
  :commands org-make-toc
  :custom
  (org-make-toc-insert-custom-ids t)
  :config
  (message "`org-make-toc' loaded"))

(use-package ox-awesomecv
  :load-path "lisp/org-cv/"
  :ensure nil
  :init (advice-add #'org-export-to-file
                    :before (lambda (&rest _) (require 'ox-awesomecv)))
  :config (message "`ox-awesomecv' loaded"))

(use-package ox-moderncv
  :load-path "lisp/org-cv/"
  :ensure nil
  :init (advice-add #'org-export-to-file
                    :before (lambda (&rest _) (require 'ox-awesomecv)))
  :config (message "`ox-moderncv' loaded"))

(use-package crdt
  :commands (crdt-share-buffer crdt-connect)
  :custom
  (crdt-use-tuntox 'confirm)
  (crdt-tuntox-password-in-url t))

;; Taken from doomemacs

(defvar pokemacs-lsp--default-read-process-output-max nil)
(defvar pokemacs-lsp--default-gcmh-high-cons-threshold nil)
(defvar pokemacs-lsp--optimization-init-p nil)

(define-minor-mode pokemacs-lsp-optimization-mode
  "Deploys universal GC and IPC optimizations for `lsp-mode' and `eglot'."
  :global t
  :init-value nil
  (if (not pokemacs-lsp-optimization-mode)
      (setq-default read-process-output-max pokemacs-lsp--default-read-process-output-max
                    gcmh-high-cons-threshold pokemacs-lsp--default-gcmh-high-cons-threshold
                    pokemacs-lsp--optimization-init-p nil)
    ;; Only apply these settings once!
    (unless pokemacs-lsp--optimization-init-p
      (setq pokemacs-lsp--default-read-process-output-max (default-value 'read-process-output-max)
            pokemacs-lsp--default-gcmh-high-cons-threshold (default-value 'gcmh-high-cons-threshold))
      (setq-default read-process-output-max (* 1024 1024))
      ;; REVIEW LSP causes a lot of allocations, with or without the native JSON
      ;;        library, so we up the GC threshold to stave off GC-induced
      ;;        slowdowns/freezes. Doom uses `gcmh' to enforce its GC strategy,
      ;;        so we modify its variables rather than `gc-cons-threshold'
      ;;        directly.
      (setq-default gcmh-high-cons-threshold (* 2 pokemacs-lsp--default-gcmh-high-cons-threshold))
      (gcmh-set-high-threshold)
      (setq pokemacs-lsp--optimization-init-p t))))

(use-package lsp-mode
  :init
  (defun minad/lsp-mode-setup-completion ()
    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
          '(orderless)))
  (setq-local completion-at-point-functions
              (list (cape-capf-buster #'lsp-completion-at-point)))
  (defconst pokemacs-lsp-mode-breadcrumb-segments
    (if use-header-line
        '(project file)
      '(project path-up-to-project file symbols)))
  :hook ((lsp-mode . pokemacs-lsp-optimization-mode)
         (lsp-completion-mode . minad/lsp-mode-setup-completion)
         (caml-mode . lsp-deferred)
         (cc-mode . lsp-deferred)
         (clojure-mode . lsp-deferred)
         (conf-toml-mode . lsp-deferred)
         (clojurescript-mode-hook . lsp-deferred)
         (clojurec-mode-hook . lsp-deferred)
         (elm-mode . lsp-deferred)
         (fsharp-mode . lsp-deferred)
         (kotlin-mode . lsp-deferred)
         (enh-ruby-mode . lsp-deferred)
         (rustic-mode . lsp-deferred)
         (tuareg-mode . lsp-deferred)
         (zig-mode    . lsp-deferred)
         (zig-ts-mode    . lsp-deferred))
  :general
  (:keymaps 'lsp-mode-map
            "C-c C-t" 'lsp-describe-thing-at-point
            "C-c C-w" 'pokemacs-lsp-get-type-and-kill
            "C-c C-l" 'lsp-find-definition
            "C-c &"   'pop-global-mark :keymaps 'override)
  (:keymaps 'lsp-command-map
            "d"   'lsp-find-definition
            "r"   'lsp-find-references
            "n"   'lsp-ui-find-next-reference
            "p"   'lsp-ui-find-prev-reference
            "i"   'counsel-semantic-or-imenu
            "R"   'lsp-rename
            "f"   'consult-flycheck
            "t r" 'lsp-treemacs-references
            "t s" 'lsp-treemacs-symbols
            )
  :custom
  (lsp-log-io nil)
  (lsp-headerline-breadcrumb-enable t)
  (lsp-headerline-breadcrumb-segments pokemacs-lsp-mode-breadcrumb-segments)
  (lsp-headerline-breadcrumb-enable-symbol-numbers nil)
  (lsp-modeline-code-actions-enable nil)
  (lsp-keymap-prefix "M-l")
  (lsp-prefer-capf t)
  (lsp-lens-enable nil)
  (lsp-completion-provider :none)
  (lsp-completion-enable t)
  (lsp-enable-imenu nil)
  (lsp-enable-snippet nil)
  (lsp-enable-dap-auto-configure nil)
  (lsp-disabled-clients '((python-mode . pyls) (python-ts-mode . pyls)))
  ;; Rust-analyzer is the almost official lsp server for Rust
  (lsp-rust-server 'rust-analyzer)
  (lsp-rust-analyzer-cargo-watch-command "clippy")
  ;; enable / disable the hints as you prefer:
  (lsp-rust-analyzer-server-display-inlay-hints t)
  (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
  (lsp-rust-analyzer-display-chaining-hints t)
  (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
  (lsp-rust-analyzer-display-closure-return-type-hints t)
  (lsp-rust-analyzer-display-parameter-hints nil)
  (lsp-rust-analyzer-display-reborrow-hints nil)
  (lsp-ui-peek-find-references nil (list :folders (vector (projectile-project-root))))
  :config

  (defvar pokemacs-type-map
    (let ((keymap (make-sparse-keymap)))
      (define-key keymap (kbd "C-w") #'pokemacs-lsp-get-type-and-kill)
      keymap)
    "The local map to navigate type enclosing.")

  (defun pokemacs-set-type-map (&rest r)
    (set-transient-map pokemacs-type-map))

  (advice-add 'lsp-describe-thing-at-point :after #'pokemacs-set-type-map)

  (defun pokemacs-lsp-get-type-and-kill ()
    (interactive)
    (let ((contents (-some->> (lsp--text-document-position-params)
                      (lsp--make-request "textDocument/hover")
                      (lsp--send-request)
                      (lsp:hover-contents))))
      (let ((contents (and contents
                           (lsp--render-on-hover-content
                            contents
                            t))))
        (let ((contents
               (pcase (lsp-workspaces)
                 (`(,workspace)
                  (lsp-clients-extract-signature-on-hover
                   contents
                   (lsp--workspace-server-id workspace)
                   t))
                 (lsp-clients-extract-signature-on-hover
                  contents
                  nil)
                 )))
          (message "Copied %s to kill-ring" contents)
          (kill-new contents)
          ))))

  (which-key-add-keymap-based-replacements lsp-command-map "u" "UI")
  (lsp-enable-which-key-integration t)

  (lsp-register-client
   (make-lsp-client
    :new-connection (lsp-stdio-connection
                     '("opam" "exec" "--" "ocamllsp"))
    :major-modes '(caml-mode tuareg-mode)
    :server-id 'ocaml-lsp-server))

  (message "`lsp' loaded"))

;; Useful link : https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/
(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :general
  ("C-M-i" 'lsp-ui-doc-show)
  ("C-c i" 'lsp-ui-imenu)
  (:keymaps 'lsp-ui-mode-map
            [remap xref-find-definitions] 'lsp-ui-peek-find-definitions
            [remap xref-find-references] 'lsp-ui-peek-find-references
            )
  (:keymaps 'lsp-ui-doc-mode-map
            "M-f" 'lsp-ui-doc-focus-frame)
  (:keymaps 'lsp-ui-doc-frame-mode-map
            "q" (lambda () (interactive) (lsp-ui-doc--delete-frame)))
  (:keymaps 'lsp-command-map
            "u f" 'lsp-ui-doc-focus-frame
            "u i" 'lsp-ui-imenu)
  :custom
  (lsp-ui-doc-delay 0.9)
  (lsp-ui-doc-position 'at-point)
  ;; Whether or not to enable the header which displays the symbol string.
  (lsp-ui-doc-header t)
  ;; Whether or not to include the object signature/type in the frame.
  (lsp-ui-doc-include-signature t)
  (lsp-ui-doc-show-with-cursor nil)
  (lsp-ui-doc-show-with-mouse nil)
  ;; Border color of the frame
  (lsp-ui-doc-border (face-foreground 'default))
  ;; Whether or not to enable lsp-ui-sideline
  (lsp-ui-sideline-enable nil)
  (lsp-ui-doc-use-webkit t)
  (lsp-ui-doc-use-childframe t)
  ;; Ignore duplicates when there is a same symbol with same contents
  ;; (lsp-ui-sideline-ignore-duplicate t)
  ;; Whether to show code actions in sideline.
  ;; (lsp-ui-sideline-show-code-actions nil)
  :config (message "`lsp-ui' loaded"))

(use-package lsp-treemacs
  :after lsp
  :config (message "`lsp-treemacs' loaded"))

(use-package consult-lsp
  :disabled)

(use-package prog-mode
  :ensure nil
  :init
  (defun pokemacs-clear-compilation-finish-functions ()
    (setq compilation-finish-functions nil))
  :hook
  (prog-mode . pokemacs-clear-compilation-finish-functions))

(use-package apheleia
  :init (apheleia-global-mode +1)
  :config
  (let*
      ((shfmt-value (alist-get 'shfmt apheleia-formatters))
       (command (pop shfmt-value))
       (shfmt-value (cons command (cons "-sr" shfmt-value))))
    (setf (alist-get 'shfmt apheleia-formatters) shfmt-value))
  (setf (alist-get 'isort apheleia-formatters)
        '("isort" "--stdout" "-"))
  (setf (alist-get 'python-mode apheleia-mode-alist)
        '(isort black))
  (setf (alist-get 'python-ts-mode apheleia-mode-alist)
        '(isort black))
  (push '(enh-ruby-mode . rubocop) apheleia-mode-alist)
  (message "`apheleia' loaded"))

(use-package dap-mode
  :general
  (:keymaps 'lsp-mode-map
            "M-<f5>" 'dap-hydra)
  :hook ((dap-mode . dap-ui-mode)
         (dap-session-created . (lambda (&_rest) (dap-hydra)))
         (dap-terminated . (lambda (&_rest) (dap-hydra/nil))))

  :config
  (setq dap-auto-configure-features '(sessions locals controls tooltip))
  (message "`dap' loaded"))

(use-package dumb-jump
  :config
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
  (defhydra dumb-jump-hydra (:color blue :columns 3)
    "Dumb Jump"
    ("j" dumb-jump-go "Go")
    ("o" dumb-jump-go-other-window "Other window")
    ("e" dumb-jump-go-prefer-external "Go external")
    ("x" dumb-jump-go-prefer-external-other-window "Go external other window")
    ("i" dumb-jump-go-prompt "Prompt")
    ("l" dumb-jump-quick-look "Quick look")
    ("b" dumb-jump-back "Back"))
  (message "`dumb-jump' loaded"))

(unless (version< emacs-version "29")
  (setq find-sibling-rules
        '(
          ("\\([^/]+\\)\\.org\\'" "\\1.el")
          ("\\([^/]+\\)\\.el\\'" "\\1.org")
          ("\\([^/]+\\)\\.c\\'" "\\1.h")
          ("\\([^/]+\\)\\.h\\'" "\\1.c")))

  (defcustom create-sibling-rules nil
    "Rules for creating \"sibling\" files.
This is used by the `pokemacs-find-sibling-file-wrapper' command.

See `find-sibling-rules' for more informations.

Unlike `find-sibling-rules', `create-sibling-rules' should only
have one rule for each file type."
    :group 'pokemacs-languages
    :type 'sexp
    :version "29.1"
    :tag " Create sibling rules")

  (setq create-sibling-rules
        '(("\\([^/]+\\)\\.ml\\'" . ("\\1.mli" . "dune exec -- ocaml-print-intf"))))

  (defun pokemacs-find-sibling-file (file)
    "Visit a \"sibling\" file of FILE.
   When called interactively, FILE is the currently visited file.

   The \"sibling\" file is defined by the `find-sibling-rules' variable."
    (interactive
     (progn
       (unless buffer-file-name
         (user-error "Not visiting a file"))
       (list buffer-file-name)))
    (condition-case
        nil
        (find-sibling-file file)
      (user-error
       (-let* (((expansion . command)
                (alist-get file create-sibling-rules nil nil 'string-match))
               (match-data (match-data))
               (start 0))
         (cond
          ((null expansion)
           (user-error "Couldn't find any sibling files nor a way to create a sibling"))

          (t
           ;; Expand \\1 forms in the expansions.
           (while (string-match "\\\\\\([&0-9]+\\)" expansion start)
             (let ((index (string-to-number (match-string 1 expansion))))
               (setq start (match-end 0)
                     expansion
                     (replace-match
                      (substring file
                                 (elt match-data (* index 2))
                                 (elt match-data (1+ (* index 2))))
                      t t expansion))
               (let* ((file (file-relative-name file (projectile-project-root)))
                      (output-buffer (get-buffer-create "*temp*" t))
                      (new-file (expand-file-name expansion))
                      (display-buffer-alist
                       (list
                        (cons "\\*temp\\*.*"
                              (cons #'display-buffer-no-window nil)))))
                 (when
                     (y-or-n-p (format-message "Create `%s'?" new-file))
                   (with-current-buffer output-buffer
                     ;; (projectile-run-shell-command-in-root
                     ;;  (concat "dune exec -- ocaml-print-intf " file))
                     (projectile-run-shell-command-in-root
                      (concat command " " file) output-buffer)
                     (dired-create-empty-file new-file)
                     (write-file new-file))
                   (kill-buffer output-buffer)
                   (find-file new-file)))))))))))
  (general-define-key
   [remap find-sibling-file]    'pokemacs-find-sibling-file
   "C-c C-a"                    'pokemacs-find-sibling-file))

(use-package fontify-face
  :hook (font-lock-mode . fontify-face-mode)
  :config (message "`fontify-face' loaded"))

(use-package flycheck
  :init
  (define-prefix-command 'pokemacs-fly-map nil "Fly-")
  (defvar-keymap pokemacs-flycheck-overlay-map
    :doc "Keymap attached to lsp and flycheck overlays.")
  (fset 'pokemacs-flycheck-overlay-map pokemacs-flycheck-overlay-map)
  :hook ((prog-mode markdown-mode git-commit-mode text-mode) . flycheck-mode)
  :general
  (:keymaps 'pokemacs-fly-map
            "p" 'flycheck-prev-error)
  (:keymaps 'pokemacs-flycheck-overlay-map
            "M-$" '(lsp-execute-code-action :which-key "LSP code action"))
  :custom
  (flycheck-indication-mode 'left-fringe)
  :config
  (pretty-hydra-define
   hydra-flycheck
   ( :title "Flycheck"
     :pre (flycheck-list-errors)
     :post (quit-windows-on "*Flycheck errors*")
     :hint nil
     :quit-key "q")
   (
    "Errors"
    (("f" flycheck-error-list-set-filter "Filter"))

    "Navigation"
    (("j" flycheck-next-error "Next")
     ("k" flycheck-previous-error "Previous")
     ("gg" flycheck-first-error "First")
     ("G" (progn (goto-char (point-max)) (flycheck-previous-error)) "Last"))))
  ;; (advice-add 'flycheck-next-error :filter-args #'flycheck-reset)
  (defun pokemacs-show-which-key-flycheck-overlay (&rest args)
    (run-with-idle-timer 0.1 nil   ; Delay of 0.1 seconds before executing
     'which-key-show-keymap 'pokemacs-flycheck-overlay-map t))

  (defun flycheck-reset (&optional n reset)
    (if (flycheck-next-error-pos n reset)
        (list n reset)
      (list n t)))
  (let ((overlays `(flycheck-info-overlay
                    flycheck-error-overlay
                    flycheck-warning-overlay
                    lsp-flycheck-warning-unnecessary-category)))
    (dolist (overlay overlays)
      (put overlay 'keymap pokemacs-flycheck-overlay-map)
      (put overlay 'cursor-sensor-functions '(pokemacs-show-which-key-flycheck-overlay))))
  (cursor-sensor-mode 1)
  (message "`flycheck' loaded"))

(use-package flycheck-correct
  :load-path "lisp/"
  :ensure nil
  :hook flycheck-mode
  :general
  (:keymaps 'flycheck-mode-map
          "M-RET" 'pokemacs-correct-or-newline)
  :config (message "`flycheck-correct' loaded"))

(if (display-graphic-p)
    (use-package quick-peek
      :config (message "`quick-peek' loaded")))

(when (display-graphic-p)
  (use-package flycheck-inline
    :hook (flycheck-mode . flycheck-inline-mode)
    :config
    (setq flycheck-inline-display-function
          (lambda (msg pos err)
            (let* ((ov (quick-peek-overlay-ensure-at pos))
                   (contents (quick-peek-overlay-contents ov)))
              (setf (quick-peek-overlay-contents ov)
                    (concat contents (when contents "\n") msg))
              (quick-peek-update ov)))
          flycheck-inline-clear-function #'quick-peek-hide)
    (message "`flycheck-inline' loaded")))

(use-package consult-flycheck
  :general
  ("C-c l" 'consult-flycheck)
  :config (message "`consult-flycheck' loaded"))

(use-package flycheck-rust
  :hook (flycheck-mode . (lambda () (flycheck-rust-setup))))

(use-package hideshow
  :ensure nil
  :hook (prog-mode . (lambda ()
                       (unless
                           (or
                            (eq major-mode 'rust-ts-mode)
                            (eq major-mode 'tree-sitter-query-mode))
                         (hs-minor-mode))))
  :commands (hs-minor-mode
             hs-toggle-hiding)
  :diminish hs-minor-mode
  :config
  (setq hs-isearch-open t)
  (message "`hideshow' loaded"))

(use-package projectile
  :demand t
  :hook (prog-mode . projectile-mode)
  :general
  ("M-p"  'projectile-command-map)
  ("<f5>" 'projectile-compile-project)
  ("<f6>" 'pokemacs-recompile)
  :config
  (defun pokemacs-recompile ()
    "Run project configure command.

Normally you'll be prompted for a compilation command, unless
variable `compilation-read-command'.  You can force the prompt
with a prefix ARG."
    (interactive)
    (let ((command (projectile-compilation-command (projectile-compilation-dir)))
          (command-map (if (projectile--cache-project-commands-p) projectile-compilation-cmd-map))
          (compilation-read-command nil))
      (projectile--run-project-cmd command command-map
                                   :show-prompt nil
                                   :prompt-prefix nil
                                   :save-buffers t
                                   :use-comint-mode projectile-configure-use-comint-mode)))
  (message "`projectile' loaded"))

(use-package separedit
  :general
  ("C-c C-e"                 'separedit)
  :config
  (setq separedit-default-mode 'markdown-mode)
  (message "`separedit' loaded"))

(use-package treemacs
  :config (message "`treemacs' loaded"))

(use-package uniquify
  :disabled
  :config
  (setq uniquify-buffer-name-style 'reverse
        uniquify-separator " • "
        uniquify-after-kill-buffer-p t
        uniquify-ignore-buffers-re "^\\*")
  (message "`uniquify' loaded"))

(use-package winner
  :demand t
  :ensure nil
  :custom
  (winner-boring-buffers
   '("*Completions*"
     "*Compile-Log*"
     "*inferior-lisp*"
     "*Fuzzy Completions*"
     "*Apropos*"
     "*Help*"
     "*cvs*"
     "*Buffer List*"
     "*Ibuffer*"
     "*esh command on file*"))
  :config
  (winner-mode 1)
  (message "`winner' loaded"))

(use-package ace-window
  :demand t
  :config
  (pretty-hydra-define
   hydra-window (:title "Window management" :quit-key "q")
   ("Movement"
    (("<left>" windmove-left "←")
     ("<down>" windmove-down "↓")
     ("<up>" windmove-up "↑")
     ("<right>" windmove-right "→"))

    "Split"
    (("v" (lambda ()
            (interactive)
            (split-window-right)
            (windmove-right)) "Vertical")
     ("h" (lambda ()
            (interactive)
            (split-window-below)
            (windmove-down)) "Horizontal")
     ("u" (progn
            (winner-undo)
            (setq this-command 'winner-undo)) "Undo")
     ("r" winner-redo "Redo"))

    "Switch"
    (("f" find-file "Find file")
     ("a" (lambda ()
            (interactive)
            (ace-window 1)
            (add-hook 'ace-window-end-once-hook
                      'hydra-window/body)) "Ace window")
     ("s" (lambda ()
            (interactive)
            (ace-swap-window)
            (add-hook 'ace-window-end-once-hook
                      'hydra-window/body)) "Swap"))

    "Resize"
    (("C-<left>" (lambda () (interactive) (pokemacs-resize-window t -5)) "X←")
     ("C-<right>" (lambda () (interactive) (pokemacs-resize-window t 5)) "X→")
     ("C-<up>" (lambda () (interactive) (pokemacs-resize-window nil 5)) "X↑")
     ("C-<down>" (lambda () (interactive) (pokemacs-resize-window nil -5)) "X↓"))

    "Purpose"
    (("M" delete-other-windows "Delete other")
     ("d" delete-window "Delete")
     ("P" purpose-set-window-purpose "Set purpose")
     ("!" purpose-toggle-window-purpose-dedicated "Toggle purpose")
     ("#" purpose-toggle-window-buffer-dedicated "Toggle buffer"))))
  (setq aw-dispatch-always t)
  (set-face-attribute 'aw-leading-char-face nil :height 2.5)
  (message "`ace-window' loaded"))

(when use-visual-fill
  (use-package visual-fill-column
    :hook ((prog-mode org-mode text-mode) . visual-fill-column-mode)
    :custom
    (visual-fill-column-width 100)
    (visual-fill-column-center-text t)
    :config

    (defun pokemacs-visual-fill-one-window ()
      (global-visual-fill-column-mode -1)
      (if (window-full-width-p)
          (progn
            (global-visual-fill-column-mode 1)
            (setq mode-line-right-align-edge 'window)
            (set-window-fringes (selected-window) 8 8 nil nil))
        (global-visual-fill-column-mode -1)))

    (add-hook 'window-state-change-hook 'pokemacs-visual-fill-one-window)
    (message "`visual-fill-column' loaded")))

(use-package pokemacs-layout
  :ensure (:type git :repo "https://github.com/mattiasdrp/pokemacs-layout.git")
  :commands pokemacs-layout-apply pokemacs-restore-session
  :config
  (defun pokemacs-restore-session (&optional columns)
    "Restore a session by creating the proper buffers."
    (interactive "P")
    (let ((pokemacs-layout-columns (or columns pokemacs-layout-columns)))
      (setq current-prefix-arg nil)
      (pokemacs-layout--apply "prog custom layout"))))

(when use-window-purpose
  (use-package window-purpose
    :config
    (purpose-mode)
    (purpose-x-magit-multi-on)
    (message "`window-purpose' loaded")))

(use-package vertico
  :ensure (vertico :files (:defaults "extensions/*"))
  :after general
  :init (vertico-mode)
  :general
  (:keymaps 'vertico-map
            "<tab>" #'minibuffer-complete         ; common prefix
            "<escape>" #'minibuffer-keyboard-quit ; Close minibuffer
            "C-M-n" #'vertico-next-group
            "C-M-p" #'vertico-previous-group
            "?" #'minibuffer-completion-help
            "M-RET" #'embark-dwim ;; pick some comfortable binding
            ;; "C-<up>" #'other-window
            )
  (:keymaps 'minibuffer-local-map
            "M-h" #'backward-kill-word)
  :custom
  ;; Grow and shrink the Vertico minibuffer
  (vertico-resize t)
  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (vertico-cycle t)
  :config
  ;; (setq vertico-sort-function 'vertico-sort-alpha)
  ;; Use `consult-completion-in-region' if Vertico is enabled.
  ;; Otherwise use the default `completion--in-region' function.
  (setq completion-in-region-function
        (lambda (&rest args)
          (apply (if vertico-mode
                     #'consult-completion-in-region
                   #'completion--in-region)
                 args)))
  ;; Prefix the current candidate with “» ”. From
  ;; https://github.com/minad/vertico/wiki#prefix-current-candidate-with-arrow
  (advice-add #'vertico--format-candidate :around
              (lambda (orig cand prefix suffix index _start)
                (setq cand (funcall orig cand prefix suffix index _start))
                (concat
                 (if (= vertico--index index)
                     (propertize "⮕ " 'face 'vertico-current)
                   "  ")
                 cand)))
  (message "`vertico' loaded"))

(use-package vertico-directory
  :after vertico
  :ensure nil
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy)
  ;; More convenient directory navigation commands
  :general
  (:keymaps 'vertico-map
            "RET" 'vertico-directory-enter
            "<DEL>" 'vertico-directory-delete-char
            "M-<DEL>" 'vertico-directory-delete-word)
  ;; Tidy shadowed file names
  :config (message "`vertico-directory' loaded"))

(use-package vertico-multiform
  :after vertico
  :hook (vertico-mode . vertico-multiform-mode)
  :ensure nil
  :custom
  (vertico-buffer-display-action '(display-buffer-in-side-window
                                   (side . right)
                                   (window-width . 0.3)))
  :config
  ;; Sort directories before files
  (defun sort-characters (characters)
    (sort characters (lambda (name1 name2) (< (char-from-name name1) (char-from-name name2)))))

  ;; Sort directories before files
  (defun sort-directories-first (files)
    (nconc (vertico-sort-alpha (seq-remove (lambda (x) (string-suffix-p "/" x)) files))
           (vertico-sort-alpha (seq-filter (lambda (x) (string-suffix-p "/" x)) files))))

  (when use-posframe
    (mapcar (lambda (properties)
              (setcdr properties (push 'posframe (cdr properties))))
            vertico-multiform-commands)
    (mapcar (lambda (properties) (setcdr properties (push 'posframe (cdr properties))))
            vertico-multiform-categories)
    (pokemacs-appendq! vertico-multiform-categories
                       '((t posframe)))
    (pokemacs-appendq! vertico-multiform-commands
                       '((posframe
                          (vertico-posframe-poshandler . posframe-poshandler-frame-top-center)
                          (vertico-posframe-border-width . 10))
                         (t posframe))))

  (vertico-multiform-mode)
  (message "`vertico-multiform' loaded"))

(when use-posframe
  (use-package vertico-posframe
    :after vertico
    :custom
    (vertico-posframe-width 80)
    :config
    (vertico-posframe-mode 1)
    (message "`vertico-posframe' loaded")))

(use-package consult
  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :ensure-system-package (rg . ripgrep)
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :general
  ;; C-c bindings (mode-specific-map)
  ("C-c h" 'consult-history)
  ("C-c m" 'consult-mode-command)
  ("C-c k" 'consult-kmacro)
  ;; C-x bindings (ctl-x-map)
  ([remap repeat-complex-command] 'consult-complex-command)
  ([remap switch-to-buffer] 'consult-buffer)
  ([remap switch-to-buffer-other-window] 'consult-buffer-other-window)
  ([remap switch-to-buffer-other-frame] 'consult-buffer-other-frame)
  ([remap bookmark-jump] 'consult-bookmark)
  ([remap project-switch-to-buffer] 'consult-project-buffer)
  ([remap yank-pop] 'consult-yank-replace)
  ([remap apropos-command] 'consult-apropos)
  ([remap goto-line] 'consult-goto-line)
  ;; ([remap isearch-forward] 'consult-line)
  ;; Custom M-# bindings for fast register access
  ("M-#" 'consult-register-load)
  ("M-'" 'consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
  ("C-M-#" 'consult-register)
  ;; Other custom bindings
  ("<help> a" 'consult-apropos)            ;; orig. apropos-command
  ;; M-g bindings (goto-map)
  ("M-g e" 'consult-compile-error)
  ("M-g o" 'consult-outline)               ;; Alternative: consult-org-heading
  ("M-g m" 'consult-mark)
  ("M-g k" 'consult-global-mark)
  ("M-g i" 'consult-imenu)
  ("M-g I" 'consult-imenu-multi)
  ;; M-s bindings (search-map)
  ("M-s d" 'consult-find)
  ("M-s D" 'consult-locate)
  ("M-s g" 'consult-grep)
  ("M-s G" 'pokemacs-consult-git-grep-always-prompt-dir)
  ("M-s r" 'consult-ripgrep)
  ("M-s R" 'pokemacs-consult-ripgrep-always-prompt-dir)
  ("M-s l" 'consult-line)
  ("M-s L" 'consult-line-multi)
  ("M-s m" 'consult-multi-occur)
  ("M-s k" 'consult-keep-lines)
  ("M-s u" 'consult-focus-lines)
  ;; Isearch integration
  ("M-s e" 'consult-isearch-history)
  (:keymaps 'isearch-mode-map
            [remap isearch-edit-string] 'consult-isearch-history
            "M-s L" 'consult-line-multi            ;; needed by consult-line to detect isearch
            )
  ;; Minibuffer history
  (:keymaps 'minibuffer-local-map
            [remap next-matching-history-element] 'consult-history
            [remap prev-matching-history-element] 'consult-history)


  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  (defun pokemacs-consult-with-region (old-consult-function &optional dir given-initial)
    "Pass the region to consult-grep/ripgrep if available.

DIR and GIVEN-INITIAL match the method signature of `consult-wrapper'."
    (interactive "P")
    (message "wrapper")
    (let ((initial
           (or given-initial
               (when (use-region-p)
                 (buffer-substring-no-properties (region-beginning) (region-end))))))
      (funcall old-consult-function dir initial)))

  (advice-add #'consult-ripgrep :around #'pokemacs-consult-with-region)
  (advice-add #'consult-grep :around #'pokemacs-consult-with-region)

  (defun pokemacs-consult-ripgrep-always-prompt-dir ()
    (interactive)
    (consult-ripgrep t))

  (defun pokemacs-consult-git-grep-always-prompt-dir ()
    (interactive)
    (consult-git-grep t))

  (defvar pokemacs-consult-line-map
    (let ((map (make-sparse-keymap)))
      (define-key map "\C-s" #'previous-history-element)
      map))

  (defun consult-ripgrep-up-directory ()
    (interactive)
    (let ((parent-dir (file-name-directory (directory-file-name default-directory))))
      (when parent-dir
        (run-at-time 0 nil
                     #'consult-ripgrep
                     parent-dir
                     (ignore-errors
                       (buffer-substring-no-properties
                        (1+ (minibuffer-prompt-end)) (point-max))))))
    (minibuffer-quit-recursive-edit))

  (consult-customize
   consult-ripgrep
   :keymap (let ((map (make-sparse-keymap)))
             (define-key map (kbd "M-l") #'consult-ripgrep-up-directory)
             map))

  (consult-customize consult-line :keymap pokemacs-consult-line-map)
  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key (kbd "M-."))
  ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)

   consult-bookmark consult-recent-file
   consult--source-project-recent-file
   consult--source-recent-file consult-buffer
   consult-ripgrep consult-git-grep consult-grep
   pokemacs-consult-git-grep-always-prompt-dir
   pokemacs-consult-ripgrep-always-prompt-dir
   consult-xref consult--source-bookmark
   :preview-key '(:debounce 0.5 "M-."))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; (kbd "C-+")

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. projectile.el (projectile-project-root)
  (autoload 'projectile-project-root "projectile")
  (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 3. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 4. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  (message "`consult' loaded"))

(use-package embark
  :commands embark-collect
  :after (consult)
  :general
  ("C-." 'embark-act)          ;; pick some comfortable binding
  ("C-:" 'embark-default-act-noquit)  ;; good alternative: M-.
  ("C-h B" 'embark-bindings)   ;; alternative for `describe-bindings'
  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  (setq embark-quit-after-action nil)
  (defun embark-default-act-noquit ()
    (interactive)
    (let ((embark-quit-after-action nil))
      (embark-dwim)
      (when-let ((win (minibuffer-selected-window)))
        (select-window win))))

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none))))
  (message "`embark' loaded"))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :after (embark consult)
  :hook
  (embark-collect-mode . consult-preview-at-point-mode)
  :config
  (message "`embark-consult' loaded"))

(use-package corfu
  :ensure (corfu :files (:defaults "extensions/*"))
  :init
  ;; Function definitions

  (defun corfu-enable-always-in-minibuffer ()
    "Enable Corfu in the minibuffer if Vertico/Mct are not active."
    (unless (or (bound-and-true-p mct--active)
                (bound-and-true-p vertico--input)
                (eq (current-local-map) read-passwd-map))
      ;; (setq-local corfu-auto nil) ;; Enable/disable auto completion
      (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
                  corfu-popupinfo-delay nil)
      (corfu-mode 1)))

  (defun corfu-move-to-minibuffer ()
    (interactive)
    (when completion-in-region--data
      (let ((completion-extra-properties corfu--extra)
            completion-cycle-threshold completion-cycling)
        (apply #'consult-completion-in-region completion-in-region--data))))

  ;; Activate mode globally
  (global-corfu-mode)

  :general
  (:keymaps 'corfu-map
            "C-g" 'corfu-quit
            "<return>" 'corfu-insert
            "M-d" 'corfu-info-documentation
            "M-l" 'corfu-info-location
            "TAB" 'corfu-insert-separator
            "M-SPC" 'corfu-insert-separator
            "M-m" 'corfu-move-to-minibuffer
            "<down>" 'corfu-next)
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  (corfu-quit-no-match t)
  (corfu-auto-prefix 1)
  (corfu-auto-delay 0)
  (corfu-separator ?\s)
  ;; (corfu-quit-at-boundary nil)
  (corfu-on-exact-match nil)
  (corfu-preview-current 'insert)
  (corfu-echo-documentation t)
  (corfu-preview-current nil)    ;; Disable current candidate preview
  (corfu-preselect-first nil)    ;; Disable candidate preselection
  (corfu-min-width 80)
  (corfu-max-width 80)
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin
  :config
  (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)
  (message "`corfu' loaded"))

(use-package corfu-popupinfo
  :ensure nil
  :hook (corfu-mode . corfu-popupinfo-mode)
  :general
  (:keymaps 'corfu-popupinfo-map
            "M-h" 'corfu-popupinfo-toggle
            "M-<up>" 'scroll-other-window-down
            "M-<down>"   'scroll-other-window)
  :custom
  (corfu-echo-delay nil) ;; Disable automatic echo and popup
  (corfu-popupinfo-delay nil)
  (corfu-popupinfo-min-width 80)
  (corfu-popupinfo-max-width 80))

(use-package corfu-prescient
  :config
  (corfu-prescient-mode 1)
  (message "`corfu-precient' loaded"))

(use-package corfu-terminal
  :unless (display-graphic-p)
  :ensure (corfu-terminal :type git :repo "https://codeberg.org/akib/emacs-corfu-terminal.git")
  :init (corfu-terminal-mode +1))

(use-package corfu-doc-terminal
  :disabled
  :unless (display-graphic-p)
  :ensure (corfu-doc-terminal :type git :repo "https://codeberg.org/akib/emacs-corfu-doc-terminal.git")
  :config (corfu-doc-terminal-mode +1))

(use-package kind-icon
  :disabled
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default) ; Have background color be the same as `corfu' face background
  (kind-icon-blend-background nil)  ; Use midpoint color between foreground and background colors ("blended")?
  (kind-icon-blend-frac 0.08)
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter) ; Enable `kind-icon'
  (setq kind-icon-mapping
        '((array "a" :icon "code-brackets" :face font-lock-type-face)
          (boolean "b" :icon "circle-half-full" :face font-lock-builtin-face)
          (class "c" :icon "view-grid-plus-outline" :face font-lock-type-face)
          (color "#" :icon "palette" :face success)
          (command "cm" :icon "code-greater-than" :face default)
          (constant "co" :icon "lock-remove-outline" :face font-lock-constant-face)
          (constructor "cn" :icon "table-column-plus-after" :face font-lock-function-name-face)
          (enummember "em" :icon "order-bool-ascending-variant" :face font-lock-builtin-face)
          (enum-member "em" :icon "order-bool-ascending-variant" :face font-lock-builtin-face)
          (enum "e" :icon "format-list-bulleted-square" :face font-lock-builtin-face)
          (event "ev" :icon "lightning-bolt-outline" :face font-lock-warning-face)
          (field "fd" :icon "application-braces-outline" :face font-lock-variable-name-face)
          (file "f" :icon "file-document-outline" :face font-lock-string-face)
          (folder "d" :icon "folder" :face font-lock-doc-face)
          (interface "if" :icon "application-brackets-outline" :face font-lock-type-face)
          (keyword "kw" :icon "key-variant" :face font-lock-keyword-face)
          (macro "mc" :icon "lambda" :face font-lock-keyword-face)
          (magic "ma" :icon "auto-fix" :face font-lock-builtin-face)
          (method "m" :icon "function-variant" :face font-lock-function-name-face)
          (function "f" :icon "function" :face font-lock-function-name-face)
          (module "{" :icon "file-code-outline" :face font-lock-preprocessor-face)
          (numeric "nu" :icon "numeric" :face font-lock-builtin-face)
          (operator "op" :icon "plus-minus" :face font-lock-comment-delimiter-face)
          (param "pa" :icon "cog" :face default)
          (property "pr" :icon "wrench" :face font-lock-variable-name-face)
          (reference "rf" :icon "library" :face font-lock-variable-name-face)
          (snippet "S" :icon "note-text-outline" :face font-lock-string-face)
          (string "s" :icon "sticker-text-outline" :face font-lock-string-face)
          (struct "%" :icon "code-braces" :face font-lock-variable-name-face)
          (text "tx" :icon "script-text-outline" :face font-lock-doc-face)
          (typeparameter "tp" :icon "format-list-bulleted-type" :face font-lock-type-face)
          (type-parameter "tp" :icon "format-list-bulleted-type" :face font-lock-type-face)
          (unit "u" :icon "ruler-square" :face font-lock-constant-face)
          (value "v" :icon "variable" :face font-lock-variable-name-face)
          (variable "va" :icon "variable" :face font-lock-variable-name-face)
          (t "." :icon "crosshairs-question" :face font-lock-warning-face)))

  ;; If you want to use text-based icons (based on NerfFonts):

  ;; (setq kind-icon-use-icons nil)
  ;; (setq kind-icon-mapping
  ;;       `(
  ;;         (array ,(nerd-icons-codicon "nf-cod-symbol_array") :face font-lock-type-face)
  ;;         (boolean ,(nerd-icons-codicon "nf-cod-symbol_boolean") :face font-lock-builtin-face)
  ;;         (class ,(nerd-icons-codicon "nf-cod-symbol_class") :face font-lock-type-face)
  ;;         (color ,(nerd-icons-codicon "nf-cod-symbol_color") :face success)
  ;;         (command ,(nerd-icons-codicon "nf-cod-terminal") :face default)
  ;;         (constant ,(nerd-icons-codicon "nf-cod-symbol_constant") :face font-lock-constant-face)
  ;;         (constructor ,(nerd-icons-codicon "nf-cod-triangle_right") :face font-lock-function-name-face)
  ;;         (enummember ,(nerd-icons-codicon "nf-cod-symbol_enum_member") :face font-lock-builtin-face)
  ;;         (enum-member ,(nerd-icons-codicon "nf-cod-symbol_enum_member") :face font-lock-builtin-face)
  ;;         (enum ,(nerd-icons-codicon "nf-cod-symbol_enum") :face font-lock-builtin-face)
  ;;         (event ,(nerd-icons-codicon "nf-cod-symbol_event") :face font-lock-warning-face)
  ;;         (field ,(nerd-icons-codicon "nf-cod-symbol_field") :face font-lock-variable-name-face)
  ;;         (file ,(nerd-icons-codicon "nf-cod-symbol_file") :face font-lock-string-face)
  ;;         (folder ,(nerd-icons-codicon "nf-cod-folder") :face font-lock-doc-face)
  ;;         (interface ,(nerd-icons-codicon "nf-cod-symbol_interface") :face font-lock-type-face)
  ;;         (keyword ,(nerd-icons-codicon "nf-cod-symbol_keyword") :face font-lock-keyword-face)
  ;;         (macro ,(nerd-icons-codicon "nf-cod-symbol_misc") :face font-lock-keyword-face)
  ;;         (magic ,(nerd-icons-codicon "nf-cod-wand") :face font-lock-builtin-face)
  ;;         (method ,(nerd-icons-codicon "nf-cod-symbol_method") :face font-lock-function-name-face)
  ;;         (function ,(nerd-icons-codicon "nf-cod-symbol_method") :face font-lock-function-name-face)
  ;;         (module ,(nerd-icons-codicon "nf-cod-file_submodule") :face font-lock-preprocessor-face)
  ;;         (numeric ,(nerd-icons-codicon "nf-cod-symbol_numeric") :face font-lock-builtin-face)
  ;;         (operator ,(nerd-icons-codicon "nf-cod-symbol_operator") :face font-lock-comment-delimiter-face)
  ;;         (param ,(nerd-icons-codicon "nf-cod-symbol_parameter") :face default)
  ;;         (property ,(nerd-icons-codicon "nf-cod-symbol_property") :face font-lock-variable-name-face)
  ;;         (reference ,(nerd-icons-codicon "nf-cod-references") :face font-lock-variable-name-face)
  ;;         (snippet ,(nerd-icons-codicon "nf-cod-symbol_snippet") :face font-lock-string-face)
  ;;         (string ,(nerd-icons-codicon "nf-cod-symbol_string") :face font-lock-string-face)
  ;;         (struct ,(nerd-icons-codicon "nf-cod-symbol_structure") :face font-lock-variable-name-face)
  ;;         (text ,(nerd-icons-codicon "nf-cod-text_size") :face font-lock-doc-face)
  ;;         (typeparameter ,(nerd-icons-codicon "nf-cod-list_unordered") :face font-lock-type-face)
  ;;         (type-parameter ,(nerd-icons-codicon "nf-cod-list_unordered") :face font-lock-type-face)
  ;;         (unit ,(nerd-icons-codicon "nf-cod-symbol_ruler") :face font-lock-constant-face)
  ;;         (value ,(nerd-icons-codicon "nf-cod-symbol_field") :face font-lock-builtin-face)
  ;;         (variable ,(nerd-icons-codicon "nf-cod-symbol_variable") :face font-lock-variable-name-face)
  ;;         (t ,(nerd-icons-codicon "nf-cod-code") :face font-lock-warning-face)))

  ;; Add hook to reset cache so the icon colors match my theme
  ;; ;; NOTE 2022-02-05: This is a hook which resets the cache whenever I switch
  ;; the theme using my custom defined command for switching themes. If I don't
  ;; do this, then the backgound color will remain the same, meaning it will not
  ;; match the background color corresponding to the current theme. Important
  ;; since I have a light theme and dark theme I switch between. This has no
  ;; function unless you use something similar
  ;; (add-hook 'kb/themes-hooks #'(lambda () (interactive) (kind-icon-reset-cache)))
  :config (message "`kind-icon' loaded"))

(use-package emacs
  :ensure nil
  :init
  ;; FRINGE
  ;; UI: the gutter looks less cramped with some space between it and  buffer.
  (setq-default fringes-outside-margins nil)
  (setq-default describe-mode-outline nil)

  ;; Try to indent and if already indented, complete
  (setq tab-always-indent 'complete)
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  (setq read-extended-command-predicate #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t)
  ;; (add-to-list 'completion-at-point-functions #'dabbrev-capf)
  (defun pokemacs-highlight-selected-window (_)
    "Highlight selected window with a different background color."
    (with-current-buffer (window-buffer (selected-window))
      (buffer-face-set `(:background ,(face-attribute 'match :background)))
      (run-with-timer 0.1 nil #'buffer-face-set 'default)))
  (advice-add 'windmove-left :after #'pokemacs-highlight-selected-window)
  (advice-add 'windmove-right :after #'pokemacs-highlight-selected-window)
  (advice-add 'windmove-up :after #'pokemacs-highlight-selected-window)
  (advice-add 'windmove-down :after #'pokemacs-highlight-selected-window)
  :config
  (pretty-hydra-define
   pokemacs-toggles
   (:title "Toggles" :quit-key "q")
   ("Basic"
    (("n" nlinum-mode "line number" :toggle nlinum-mode)
     ("w" whitespace-mode "whitespace" :toggle whitespace-mode)
     ("r" rainbow-mode "rainbow" :toggle rainbow-mode)
     ("R" rainbow-delimiters-mode "rainbow delim" :toggle rainbow-delimiters-mode)
     ("L" global-page-break-lines-mode "page break lines" :toggle global-page-break-lines-mode))
    "Highlight"
    (("l" hl-line-mode "line" :toggle hl-line-mode)
     ("t" hl-todo-mode "todo" :toggle hl-todo-mode))
    "UI"
    (("d" pokemacs-toggle-dark-light-theme "dark theme" :toggle pokemacs-dark-theme-p))
    "Coding"
    (("f" flycheck-mode "flycheck" :toggle flycheck-mode)
     ("e" electric-indent-mode "indent" :toggle electric-indent-mode)
     )
    "Emacs"
    (("D" toggle-debug-on-error "debug on error" :toggle (default-value 'debug-on-error))
     ("X" toggle-debug-on-quit "debug on quit" :toggle (default-value 'debug-on-quit)))))
  (message "`emacs' loaded"))

(use-package windmove
  :ensure nil
  :general
  ;; windmove
  ("C-x <left>"              'windmove-left)
  ("C-x <right>"             'windmove-right)
  ("C-x <up>"                'windmove-up)
  ("C-x <down>"              'windmove-down)
  :bind
  (:repeat-map pokemacs-windmove-navigation-repeat-map
               ("<left>" . 'windmove-left)
               ("<right>" . 'windmove-right)
               ("<up>" . 'windmove-up)
               ("<down>" . 'windmove-down))
  :config
  (pokemacs-set-repeat-exit-timeout '(windmove-left windmove-up windmove-down window-right)))

(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (orderless-matching-styles '(orderless-prefixes))
  (orderless-component-separator 'orderless-escapable-split-on-space)
  (read-file-name-completion-ignore-case t)
  (read-buffer-completion-ignore-case t)
  (completion-ignore-case t)
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles basic partial-completion))))
  :config (message "`orderless' loaded"))

(use-package cape
  :init (define-prefix-command 'pokemacs-cape-map nil "Cape-")
  :general
  ("M-c" 'pokemacs-cape-map)
  (:keymaps 'pokemacs-cape-map
            "p" 'completion-at-point ;; capf
            "t" 'complete-tag        ;; etags
            "d" 'cape-dabbrev        ;; or dabbrev-completion
            "h" 'cape-history
            "f" 'cape-file
            "k" 'cape-keyword
            "s" 'cape-symbol
            "a" 'cape-abbrev
            "i" 'cape-ispell
            "l" 'cape-line
            "w" 'cape-dict
            "\\" 'cape-tex
            "_" 'cape-tex
            "^" 'cape-tex
            "&" 'cape-sgml
            "r" 'cape-rfc1345)
  :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  (add-to-list 'completion-at-point-functions #'cape-file)

  ;; Defining capf for specific modes
  (defalias 'cape-?dict+keyword
    (if pokemacs-dict
        (cape-capf-super #'cape-dict #'cape-keyword)
      (cape-capf-super #'cape-keyword)))
  :hook
  (git-commit-mode . (lambda () (add-to-list 'completion-at-point-functions #'cape-?dict+keyword)))
  (text-mode . (lambda () (add-to-list 'completion-at-point-functions #'cape-?dict+keyword))))

(use-package marginalia
  :after vertico
  :init (marginalia-mode)
  :custom
  (marginalia-align 'center)
  (marginalia-align-offset -1)
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :config (message "`marginalia' loaded"))

(use-package iedit
  :general
  (:keymaps 'lsp-mode-map
            "C-;" nil)
  :config (message "`iedit' loaded"))

;; Configure Tempel
(use-package tempel
  ;; Require trigger prefix before template name when completing.
  :general
  ("M-+" 'tempel-complete) ;; Alternative tempel-expand
  ;; ("M-SPC" 'tempel-complete) ;; Alternative tempel-expand
  ("M-*" 'tempel-insert)
  (:keymaps 'tempel-map
            "RET" 'tempel-next)
  :init
  ;; Setup completion at point
  (defun tempel-setup-capf ()
    ;; Add the Tempel Capf to `completion-at-point-functions'.
    ;; `tempel-expand' only triggers on exact matches. Alternatively use
    ;; `tempel-complete' if you want to see all matches, but then you
    ;; should also configure `tempel-trigger-prefix', such that Tempel
    ;; does not trigger too often when you don't expect it. NOTE: We add
    ;; `tempel-expand' *before* the main programming mode Capf, such
    ;; that it will be tried first.
    (setq-local completion-at-point-functions
                (cons #'tempel-expand
                      completion-at-point-functions)))

  (add-hook 'prog-mode-hook 'tempel-setup-capf)
  (add-hook 'text-mode-hook 'tempel-setup-capf)

  ;; Optionally make the Tempel templates available to Abbrev,
  ;; either locally or globally. `expand-abbrev' is bound to C-x '.
  ;; (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
  ;; (global-tempel-abbrev-mode)
  :config
  (setq-local tempel-template-sources tempel-template-sources)
  (put 'tempel-template-sources 'permanent-local t))

;; Optional: Add tempel-collection.
;; The package is young and doesn't have comprehensive coverage.
(use-package tempel-collection)

(use-package anzu
  :init
  (global-anzu-mode +1)
  (anzu-mode +1)
  :config
  (global-set-key [remap query-replace] 'anzu-query-replace)
  (global-set-key [remap query-replace-regexp] 'anzu-query-replace-regexp)
  (define-key isearch-mode-map [remap isearch-query-replace]  #'anzu-isearch-query-replace)
  (define-key isearch-mode-map [remap isearch-query-replace-regexp] #'anzu-isearch-query-replace-regexp)
  (message "`anzu' loaded"))

(defcustom pokemacs-mode-line-right-align 'right-fringe
  "See https://github.com/seagle0128/doom-modeline/issues/672.
   Original value is 'window"
  :group 'pokemacs-appearance
  :type 'symbol
  :tag " Modeline")

(use-package doom-modeline
  :demand t
  :init
  ;; If non-nil, cause imenu to see `doom-modeline' declarations.
  ;; This is done by adjusting `lisp-imenu-generic-expression' to
  ;; include support for finding `doom-modeline-def-*' forms.
  ;; Must be set before loading doom-modeline.
  (setq doom-modeline-support-imenu t)
  ;; I don't care about the percentage position of the cursor
  (setq mode-line-percent-position nil)
  (setq mode-line-right-align-edge pokemacs-mode-line-right-align)
  :custom

  ;; Whether to use hud instead of default bar. It's only respected in GUI.
  (doom-modeline-hud nil)

  ;; The limit of the window width.
  ;; If `window-width' is smaller than the limit, some information won't be
  ;; displayed. It can be an integer or a float number. `nil' means no limit.
  (doom-modeline-window-width-limit 85)

  ;; How to detect the project root.
  ;; nil means to use `default-directory'.
  ;; The project management packages have some issues on detecting project root.
  ;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
  ;; to hanle sub-projects.
  ;; You can specify one if you encounter the issue.
  (doom-modeline-project-detection 'projectile)

  ;; Determines the style used by `doom-modeline-buffer-file-name'.
  ;;
  ;; Given ~/Projects/FOSS/emacs/lisp/comint.el
  ;;   auto => emacs/l/comint.el (in a project) or comint.el
  ;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
  ;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
  ;;   truncate-with-project => emacs/l/comint.el
  ;;   truncate-except-project => ~/P/F/emacs/l/comint.el
  ;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
  ;;   truncate-all => ~/P/F/e/l/comint.el
  ;;   truncate-nil => ~/Projects/FOSS/emacs/lisp/comint.el
  ;;   relative-from-project => emacs/lisp/comint.el
  ;;   relative-to-project => lisp/comint.el
  ;;   file-name => comint.el
  ;;   buffer-name => comint.el<2> (uniquify buffer name)
  ;;
  ;; If you are experiencing the laggy issue, especially while editing remote files
  ;; with tramp, please try `file-name' style.
  ;; Please refer to https://github.com/bbatsov/projectile/issues/657.
  (doom-modeline-buffer-file-name-style 'truncate-all)

  ;; Whether display icons in the mode-line.
  ;; While using the server mode in GUI, should set the value explicitly.
  (doom-modeline-icon t)

  ;; Whether display the colorful icon for `major-mode'.
  ;; It respects `all-the-icons-color-icons'.
  (doom-modeline-major-mode-color-icon t)

  ;; Whether display the icon for the buffer state. It respects `doom-modeline-icon'.
  (doom-modeline-buffer-state-icon t)

  ;; Whether display the modification icon for the buffer.
  ;; It respects `doom-modeline-icon' and `doom-modeline-buffer-state-icon'.
  (doom-modeline-buffer-modification-icon t)

  ;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.
  (doom-modeline-unicode-fallback t)

  ;; Major modes in which to display word count continuously.
  ;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count'.
  ;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or
  ;; remove the modes from `doom-modeline-continuous-word-count-modes'.
  (doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))

  ;; If non-nil, only display one number for check information if applicable.
  (doom-modeline-check-simple-format nil)

  ;; The maximum number displayed for notifications.
  (doom-modeline-number-limit 99)

  ;; The maximum displayed length of the branch name of version control.
  (doom-modeline-vcs-max-length 12)

  ;; Whether display the minions minor mode
  (doom-modeline-minor-modes t)

  ;; Whether display the mu4e notifications
  (doom-modeline-mu4e nil)

  ;; Whether display the GitHub notifications. It requires `ghub' package.
  (doom-modeline-github nil)

  ;; The interval of checking GitHub.
  (doom-modeline-github-interval 30)

  ;; Whether display the environment version.
  (doom-modeline-env-version t)
  ;; Or for individual languages
  (doom-modeline-env-enable-python t)
  (doom-modeline-env-enable-ruby t)
  (doom-modeline-env-enable-perl t)
  (doom-modeline-env-enable-go t)
  (doom-modeline-env-enable-elixir t)
  (doom-modeline-env-enable-rust t)

  ;; Change the executables to use for the language version string
  (doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
  (doom-modeline-env-ruby-executable "ruby")
  (doom-modeline-env-perl-executable "perl")
  (doom-modeline-env-go-executable "go")
  (doom-modeline-env-elixir-executable "iex")
  (doom-modeline-env-rust-executable "rustc")

  ;; What to display as the version while a new one is being loaded
  (doom-modeline-env-load-string "...")


  :config
  ;; Define your custom doom-modeline
  (doom-modeline-def-modeline 'pokemacs-no-lsp-line
    '(bar " " matches follow buffer-info modals remote-host buffer-position word-count parrot selection-info)
    '(misc-info persp-name grip debug minor-modes major-mode process vcs check))

  (doom-modeline-def-modeline 'pokemacs-lsp-line
    '(" " matches follow lsp modals remote-host buffer-position word-count parrot selection-info)
    '(misc-info persp-name grip debug minor-modes major-mode process vcs check))

  ;; TEMP: Emacs 29 adds position to symbols after using doom-modeline-def-modeline.
  (setq doom-modeline-fn-alist
        (unless (version< emacs-version "29")
          (--map
           (cons (remove-pos-from-symbol (car it)) (cdr it))
           doom-modeline-fn-alist)
          doom-modeline-fn-alist))

  (defun pokemacs-mode-line-to-header-line ()
    (when use-header-line
      (setq header-line-format mode-line-format)
      (setq mode-line-format nil)))

  ;; Add to `doom-modeline-mode-hook` or other hooks
  (defun pokemacs-setup-no-lsp-doom-modeline ()
    (message "doom no lsp modeline change")
    (doom-modeline-set-modeline 'pokemacs-no-lsp-line 'default)
    (pokemacs-mode-line-to-header-line))

  (defun pokemacs-setup-lsp-doom-modeline ()
    (message "doom lsp modeline change")
    (lsp-headerline-breadcrumb-mode -1)
    (doom-modeline-set-modeline 'pokemacs-lsp-line nil)
    (pokemacs-mode-line-to-header-line)
    (lsp-headerline-breadcrumb-mode 1))

  ;; Redefine all the mouse interactions of the modeline to the headerline
  (add-hook 'doom-modeline-mode-hook 'pokemacs-setup-no-lsp-doom-modeline)
  (add-hook 'lsp-mode-hook 'pokemacs-setup-lsp-doom-modeline)
  (doom-modeline-mode)
  (when use-header-line
    (define-key mode-line-major-mode-keymap [header-line]
                (lookup-key mode-line-major-mode-keymap [mode-line]))
    (define-key mode-line-minor-mode-keymap [header-line]
                (lookup-key mode-line-minor-mode-keymap [mode-line])))
  (message "`doom-modeline' loaded"))

(use-package minions
  :demand t
  :config (minions-mode)
  :custom
  (minions-mode-line-lighter "☰")
  ;; :general
  ;; (:keymaps 'minions-mode-line-minor-modes-map
  ;;           "<mode-line> <mouse-1>" 'minions-minor-modes-menu)
  :config (message "`minions' loaded"))

(use-package outline
  :ensure nil
  :general
  ("C-o" 'cm-map)
  (:keymaps 'cm-map
            ;; HIDE
            "q" '(outline-hide-sublevels :which-key "Hide everything but the top-level headings")
            "t" '(outline-hide-body :which-key "Hide everything but headings (all body lines")
            "o" '(outline-hide-other :which-key "Hide other branche")
            "c" '(outline-hide-entry :which-key "Hide this entry's bod")
            "l" '(outline-hide-leaves :which-key "Hide body lines in this entry and sub-entrie")
            "d" '(outline-hide-subtree :which-key "Hide everything in this entry and sub-entrie")
            ;; SHOW
            "a" '(outline-show-all :which-key "Show (expand) everythin")
            "e" '(outline-show-entry :which-key "Show this heading's bod")
            "i" '(outline-show-children :which-key "Show this heading's immediate child sub-heading")
            "k" '(outline-show-branches :which-key "Show all sub-headings under this headin")
            "s" '(outline-show-subtree :which-key "Show (expand) everything in this heading & belo")
            ;; MOVE
            "u" '(outline-up-heading :which-key "U")
            "n" '(outline-next-visible-heading :which-key "Nex")
            "p" '(outline-previous-visible-heading :which-key "Previou")
            "f" '(outline-forward-same-level :which-key "Forward - same leve")
            "b" '(outline-backward-same-level :which-key "Backward - same leve")
            )
  :config
  (define-prefix-command 'cm-map nil "Outline-")
  (set-display-table-slot standard-display-table
                          'selective-display
                          (string-to-vector "+++"))

  (message "`outline' loaded"))

(use-package rainbow-mode
  :hook (help-mode prog-mode text-mode org-mode)
  :config (message "`rainbow-mode' loaded"))

(if use-rainbow
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode)
      :config (message "`rainbow-delimiters' loaded")))

(use-package pulsar
  :config
  (setq pulsar-pulse-functions
        '(recenter-top-bottom
          move-to-window-line-top-bottom
          reposition-window
          forward-page
          backward-page
          scroll-up-command
          scroll-down-command
          org-next-visible-heading
          org-previous-visible-heading
          org-forward-heading-same-level
          org-backward-heading-same-level
          outline-backward-same-level
          outline-forward-same-level
          outline-next-visible-heading
          outline-previous-visible-heading
          outline-up-heading
          ))

  (setq pulsar-pulse-on-window-change t)
  (setq pulsar-pulse t)
  (setq pulsar-delay 0.055)
  (setq pulsar-iterations 10)
  (setq pulsar-face 'pulsar-magenta)
  (setq pulsar-highlight-face 'pulsar-yellow)
  (pulsar-global-mode 1)
  (message "`pulsar' loaded"))

(when use-solaire
  (use-package solaire-mode
    :config
    (solaire-global-mode +1)
    (message "`solaire' loaded")))

(when use-dashboard
  (use-package page-break-lines
    :config (message "`page-break-lines' loaded"))

  (use-package dashboard
    :custom
    ;; Set the title
    (dashboard-banner-logo-title "Pokemacs")
    ;; ;; Set the banner
    (dashboard-startup-banner "~/.emacs.d/etc/dashboard/calvin_hobbes.jpeg")
    (dashboard-center-content t)
    (dashboard-set-heading-icons t)
    (dashboard-icon-type (if use-all-the-icons 'all-the-icons 'nerd-icons))
    (dashboard-display-icons-p (if use-all-the-icons nil t))
    (dashboard-set-file-icons t)
    (dashboard-items '((recents  . 5)
                       (bookmarks . 5)
                       (projects . 5)
                       (agenda . 5)))
    (dashboard-set-navigator t)
    (dashboard-set-footer nil)
    (dashboard-week-agenda t)
    (dashboard-init-info
     (lambda ()
       (let ((package-count 0) (time (emacs-init-time)))
         (when (fboundp 'elpaca--queued)
           (setq time (format "%f seconds" (float-time (time-subtract elpaca-after-init-time
                                                                      before-init-time))))
           (setq package-count (length (elpaca--queued))))
         (if (zerop package-count)
             (format "Emacs started in %s with %s gc" time gcs-done)
           (format "%d packages loaded in %s with %s gc" package-count time gcs-done)))))
    :hook
    (elpaca-after-init . dashboard-insert-startupify-lists)
    (elpaca-after-init . dashboard-initialize)
    :config
    (dashboard-setup-startup-hook)
    (message "`dashboard' loaded")))

(when use-eaf
  (use-package eaf
    :load-path "lisp/emacs-application-framework"
    :ensure nil
    :custom
    ;; See https://github.com/emacs-eaf/emacs-application-framework/wiki/Customization
    (eaf-browser-continue-where-left-off t)
    (eaf-browser-enable-adblocker t)
    ;; (browse-url-browser-function 'eaf-open-browser)
    (eaf-browser-default-search-engine "duckduckgo")
    :config
    (require 'eaf-all-the-icons)
    (require 'eaf-org)
    (require 'eaf-browser)
    ;; (require 'eaf-pdf-viewer)
    (require 'eaf-system-monitor)
    (require 'eaf-image-viewer)
    (require 'eaf-markdown-previewer)
    (require 'eaf-org-previewer)
    (require 'eaf-demo)

    (defalias 'browse-web #'eaf-open-browser)
    ;; (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
    ;; (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
    (eaf-bind-key nil "M-q" eaf-browser-keybinding)
    (message "`eaf' loaded"))) ;; unbind, see more in the Wiki

(use-package treesit
  :demand t
  :ensure nil
  :config (message "`treesit' loaded"))

(use-package treesit-auto
  :demand t
  :init
  (defun pokemacs-fix-treesit-auto (lang)
    (interactive
     (let ((langs treesit-auto-langs))
       (list (completing-read "Lang: " langs))))
    (let ((treesit-auto-langs `(,(intern lang))))
      (treesit-auto-install-all)))
  :custom
  (treesit-auto-install 'prompt)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode)
  (message "`treesit-auto' loaded"))

;; This package needs to be loaded to use language parsers
(use-package tree-sitter-langs
  :config (message "`tree-sitter-langs' loaded"))

(use-package tree-sitter
  :hook
  (tuareg-mode . tree-sitter-mode)
  (tree-sitter-after-on . tree-sitter-hl-mode)
  :config
  ;; This makes every node a link to a section of code
  (setq tree-sitter-debug-jump-buttons t)
  ;; and this highlights the entire sub tree in your code
  (setq tree-sitter-debug-highlight-jump-region t)
  ;; (global-tree-sitter-mode)
  :config (message "`tree-sitter' loaded"))

(use-package ts-fold
  :disabled
  :ensure (ts-fold :host github :repo "emacs-tree-sitter/ts-fold")
  :hook
  (tuareg-mode . ts-fold-mode)
  (c-mode      . ts-fold-mode)
  (c++-mode    . ts-fold-mode)
  (python-mode . ts-fold-mode)
  (rustic-mode . ts-fold-mode)
  :custom
  (ts-fold-replacement "  [...]  ")
  :config (message "`ts-fold' loaded"))

(use-package ts-fold-indicators
  :disabled
  :load-path "lisp/ts-fold/"
  :ensure nil
  :hook
  (tree-sitter-after-on . ts-fold-indicators-mode)
  :config
  (setq ts-fold-indicators-fringe 'left-fringe)
  (setq ts-fold-indicators-priority 100)
  (message "`ts-fold-indicators' loaded"))

(use-package combobulate
  :disabled
  :after treesit
  :preface
  ;; You can customize Combobulate's key prefix here.
  ;; Note that you may have to restart Emacs for this to take effect!
  (setq combobulate-key-prefix "C-c c")
  :hook
  ((python-ts-mode . combobulate-mode)
   (js-ts-mode . combobulate-mode)
   (html-ts-mode . combobulate-mode)
   (css-ts-mode . combobulate-mode)
   (yaml-ts-mode . combobulate-mode)
   (typescript-ts-mode . combobulate-mode)
   (json-ts-mode . combobulate-mode)
   (tsx-ts-mode . combobulate-mode))
  ;; Amend this to the directory where you keep Combobulate's source
  ;; code.
  :load-path "lisp/combobulate")

(defgroup pokemacs-languages nil
  "Pokemacs languages options."
  :group 'pokemacs
  :tag "Languages")

(defcustom use-clojure nil
  "If non-nil, uses the Clojure packages."
  :group 'pokemacs-languages
  :type 'boolean
  :tag " Clojure")

(defcustom use-elm nil
  "If non-nil, uses the Elm packages."
  :group 'pokemacs-languages
  :type 'boolean
  :tag " Elm")

(defcustom use-fsharp nil
  "If non-nil, uses the F# packages."
  :group 'pokemacs-languages
  :type 'boolean
  :tag " F#")

(defcustom use-kotlin nil
  "If non-nil, uses the Kotlin packages."
  :group 'pokemacs-languages
  :type 'boolean
  :tag " Kotlin")

(defcustom use-java nil
  "If non-nil, uses the Java packages."
  :group 'pokemacs-languages
  :type 'boolean
  :tag " Java")

(defcustom use-latex nil
  "If non-nil, uses the LaTeX packages."
  :group 'pokemacs-languages
  :type 'boolean
  :tag "LaTeX")

(defcustom use-markdown nil
  "If non-nil, uses the markdown packages."
  :group 'pokemacs-languages
  :type 'boolean
  :tag " Markdown")

(defcustom use-michelson nil
  "If non-nil, uses the michelson packages."
  :group 'pokemacs-languages
  :type 'boolean
  :tag "Michelson")

(defcustom use-ocaml t
  "If non-nil, uses the OCaml packages."
  :group 'pokemacs-languages
  :type 'boolean
  :tag " OCaml")

(defcustom use-python nil
  "If non-nil, uses the Python packages."
  :group 'pokemacs-languages
  :type 'boolean
  :tag " Python")

(defcustom use-racket nil
  "If non-nil, uses the Racket packages."
  :group 'pokemacs-languages
  :type 'boolean
  :tag "󰘧 Racket")

(defcustom use-reason nil
  "If non-nil, uses the Reason packages."
  :group 'pokemacs-languages
  :type 'boolean
  :tag " ReasonML")

(defcustom use-ruby t
  "If non-nil, uses the Ruby packages."
  :group 'pokemacs-languages
  :type 'boolean
  :tag " Ruby")

(defcustom use-rust nil
  "If non-nil, uses the rust packages."
  :group 'pokemacs-languages
  :type 'boolean
  :tag " Rust")

(defcustom use-sicp nil
  "If non-nil, uses the sicp related packages."
  :group 'pokemacs-languages
  :type 'boolean
  :tag "󰘧 SICP")

(defcustom use-web nil
  "If non-nil, uses the web packages."
  :group 'pokemacs-languages
  :type 'boolean
  :tag " Web")

(defcustom use-zig nil
  "If non-nil, uses the zig packages."
  :group 'pokemacs-languages
  :type 'boolean
  :tag " Zig")

(when use-markdown
  (use-package markdown-mode
    :ensure nil
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'"       . markdown-mode)
           ("\\.markdown\\'" . gfm-mode))
    :init
    (setq native-comp-deferred-compilation-deny-list '("markdown-mode\\.el$"))
    (setq markdown-command "markdown")
    (setq markdown-open-command "retext")
    :hook (gfm-mode . (lambda ()
                        (setq-local markdown-command "pandoc --metadata title:Title -t html5 --css ~/markdown_css/github-markdown-dark.css -f gfm -s")))
    :config (message "`markdown-mode' loaded")))

(when use-markdown
  (use-package markdown-toc
    :config (message "`markdown-toc' loaded")))

(when use-pandoc
  (use-package pandoc-mode
    :ensure-system-package pandoc
    :hook ((markdown-mode . pandoc-mode)
           (pandoc-mode . pandoc-load-default-settings))
    :config (message "`pandoc-mode' loaded")))

(use-package conf-mode
  :ensure nil
  :mode (
         ("/\\.merlin\\'" . conf-mode)
         ("_tags\\'" . conf-mode)
         ("_log\\'" . conf-mode)
         ("\\.toml\\'" . conf-toml-mode)
         )
  :config (message "`conf-mode' loaded"))

(use-package json-mode
  :mode (("\\.bowerrc$"     . json-mode)
         ("\\.jshintrc$"    . json-mode)
         ("\\.json_schema$" . json-mode)
         ("\\.json\\'"      . json-mode))
  :general
  (:keymaps 'json-mode-map
            "C-c <tab>" 'json-mode-beautify
            "<tab>" 'hs-toggle-hiding
            "C-c C-a" 'hs-show-all
            "C-c C-t" 'hs-hide-all
            "C-c C-l" 'hs-hide-level
            )
  :config
  (make-local-variable 'js-indent-level)
  (message "`json-mode' loaded"))

(use-package dune
  :mode ("^dune$" "^dune-project$")
  :init
  (define-prefix-command 'pokemacs-dune-map nil "Dune-")
  :general
  ("M-d" pokemacs-dune-map)
  (:keymaps 'pokemacs-dune-map
            "C-c" 'compile
            "l" 'dune-insert-library-form
            "e" 'dune-insert-executable-form
            "x" 'dune-insert-executables-form
            "r" 'dune-insert-rule-form
            "p" 'dune-insert-ocamllex-form
            "y" 'dune-insert-ocamlyacc-form
            "m" 'dune-insert-menhir-form
            "a" 'dune-insert-alias-form
            "i" 'dune-insert-install-form
            "c" 'dune-insert-copyfiles-form
            "t" 'dune-insert-tests-form
            "v" 'dune-insert-env-form
            "d" 'dune-insert-ignored-subdirs-form)
  :config (message "`dune' loaded"))

(use-package make-mode
  :ensure nil
  :hook (make-mode . semantic-mode)
  :config (message "`make-mode' loaded"))

(use-package cc-mode
  :ensure nil
  :general
  (:keymaps 'c-mode-map
            "C-c C-a" nil))

(use-package ccls
  :after projectile
  :demand t
  :hook ((c-mode c++-mode objc-mode cuda-mode) . (lambda () (require 'ccls) (lsp)))
  :config
  (setq ccls-initialization-options '(:index (:comments 2) :completion (:detailedLabel t)))
  (defun ccls/callee () (interactive) (lsp-ui-peek-find-custom "$ccls/call" '(:callee t)))
  (defun ccls/caller () (interactive) (lsp-ui-peek-find-custom "$ccls/call"))
  (defun ccls/vars (kind) (lsp-ui-peek-find-custom "$ccls/vars" `(:kind ,kind)))
  (defun ccls/base (levels) (lsp-ui-peek-find-custom "$ccls/inheritance" `(:levels ,levels)))
  (defun ccls/derived (levels) (lsp-ui-peek-find-custom "$ccls/inheritance" `(:levels ,levels :derived t)))
  (defun ccls/member (kind) (interactive) (lsp-ui-peek-find-custom "$ccls/member" `(:kind ,kind)))

  ;; References w/ Role::Role
  (defun ccls/references-read () (interactive)
         (lsp-ui-peek-find-custom "textDocument/references"
                                  (plist-put (lsp--text-document-position-params) :role 8)))

  ;; References w/ Role::Write
  (defun ccls/references-write ()
    (interactive)
    (lsp-ui-peek-find-custom "textDocument/references"
                             (plist-put (lsp--text-document-position-params) :role 16)))

  ;; References w/ Role::Dynamic bit (macro expansions)
  (defun ccls/references-macro () (interactive)
         (lsp-ui-peek-find-custom "textDocument/references"
                                  (plist-put (lsp--text-document-position-params) :role 64)))

  ;; References w/o Role::Call bit (e.g. where functions are taken addresses)
  (defun ccls/references-not-call () (interactive)
         (lsp-ui-peek-find-custom "textDocument/references"
                                  (plist-put (lsp--text-document-position-params) :excludeRole 32)))

  ;; ccls/vars ccls/base ccls/derived ccls/members have a parameter while others are interactive.
  ;; (ccls/base 1) direct bases
  ;; (ccls/derived 1) direct derived
  ;; (ccls/member 2) => 2 (Type) => nested classes / types in a namespace
  ;; (ccls/member 3) => 3 (Func) => member functions / functions in a namespace
  ;; (ccls/member 0) => member variables / variables in a namespace
  ;; (ccls/vars 1) => field
  ;; (ccls/vars 2) => local variable
  ;; (ccls/vars 3) => field or local variable. 3 = 1 | 2
  ;; (ccls/vars 4) => parameter

  ;; References whose filenames are under this project
  (message "`ccls' loaded"))

(when use-clojure
  (use-package clojure-mode
    :hook (clojure-mode . (lambda () (add-hook 'before-save-hook 'lsp-format-buffer)))
    :config (message "`clojure-mode' loaded")))

(when use-clojure
  (use-package cider
    :config (message "`cider' loaded")))

(use-package elisp-mode
  :ensure nil
  :hook (elisp-mode . semantic-mode)
  :config (message "`elisp-mode' loaded"))

(use-package puni
  :hook ((clojure-mode elisp-mode) . puni-mode)
  :config (message "`puni' loaded")
  ;; :general
  ;; (:keymaps 'paredit-mode-map
  ;;  "C-<right>" nil
  ;;  "C-<left>" nil)
  )

(use-package flycheck-package
  :hook (flycheck-mode . (lambda () (flycheck-package-setup)))
  :config (message "`flycheck-package' loaded"))

(when use-elm
  (use-package elm-mode
    :general
    (:keymaps 'elm-mode-map
     "<tab>" 'elm-indent-cycle)
    :config (message "`elm-mode' loaded"))

  (use-package haskell-mode
    :config (message "`haskell-mode' loaded")))

(when use-fsharp
  (use-package fsharp-mode
    :init
    (add-to-list 'exec-path (concat (getenv "HOME") "/.dotnet"))
    (add-to-list 'exec-path (concat (getenv "HOME") "/.dotnet/tools"))
    (setenv "PATH"
            (concat
             (concat (getenv "HOME") "/.dotnet")
             ":"
             (concat (getenv "HOME") "/.dotnet/tools")
             ":"
             (getenv "PATH")))
    :config (message "`fsharp-mode' loaded")))

(when use-kotlin
  (use-package kotlin-mode
    :config (message "`kotlin-mode' loaded")))

(when use-java
  (use-package lsp-java
    :hook
    (java-mode . lsp)
    (java-mode . (lambda () (abbrev-mode -1)))))

(when use-latex
  (use-package tex-site
    :ensure (auctex :pre-build
                    (("./autogen.sh")
                     ("./configure"
                      "--without-texmf-dir"
                      "--with-packagelispdir=./"
                      "--with-packagedatadir=./")
                     ("make"))
                    :build (:not elpaca--compile-info) ;; Make will take care of this step
                    :files ("*.el" "doc/*.info*" "etc" "images" "latex" "style")
                    :version (lambda (_) (require 'tex-site) AUCTeX-version))
    :mode ("\\.tex\\'" . latex-mode)
    :hook
    (LaTeX-mode . LaTeX-math-mode)
    (LaTeX-mode . TeX-PDF-mode)
    (LaTeX-mode . flycheck-mode)
    (LaTeX-mode . LaTeX-math-mode)
    :init
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master 'dwim)
    (setq reftex-plug-into-AUCTeX t)
    (setq TeX-PDF-mode t)
    (setq TeX-source-correlate-mode t)
    (setq TeX-source-correlate-method 'synctex)
    (setq TeX-source-correlate-start-server t)
    (setq TeX-electric-sub-and-superscript t)
    :config
    (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
          TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
          TeX-source-correlate-start-server t) ;; not sure if last line is neccessary
    ;; to have the buffer refresh after compilation,
    ;; very important so that PDFView refesh itself after comilation
    (add-hook 'TeX-after-compilation-finished-functions
              #'TeX-revert-document-buffer)
    (reftex-isearch-minor-mode)
    (message "`tex-site' loaded"))

  (use-package preview
    :ensure nil
    :hook (LaTeX-mode . LaTeX-preview-setup)
    :config
    (setq-default preview-scale 1.4
                  preview-scale-function
                  (lambda () (* (/ 10.0 (preview-document-pt)) preview-scale)))
    ;; Don't cache preamble, it creates issues with SyncTeX. Let users enable
    ;; caching if they have compilation times that long.
    (setq preview-auto-cache-preamble nil))
  ;; :general
  ;;   (:keymaps 'LaTeX-mode-map
  ;;             "p" #'preview-at-point
  ;;             "P" #'preview-clearout-at-point))

  (use-package cdlatex
    :hook
    (LaTeX-mode . cdlatex-mode)
    (org-mode . org-cdlatex-mode)
    :config
    ;; Use \( ... \) instead of $ ... $.
    (setq cdlatex-use-dollar-to-ensure-math nil)
    ;; Disabling keys that have overlapping functionality with other parts of Doom.
    :general
    (:keymaps 'cdlatex-mode-map
              ;; Smartparens takes care of inserting closing delimiters, and if you
              ;; don't use smartparens you probably don't want these either.
              "TAB" nil
              "$" nil
              "(" nil
              "{" nil
              "[" nil
              "|" nil
              "<" nil
              ;; AUCTeX takes care of auto-inserting {} on _^ if you want, with
              ;; `TeX-electric-sub-and-superscript'.
              "^" nil
              "_" nil
              ;; AUCTeX already provides this with `LaTeX-insert-item'.
              [(control return)] nil))

  (use-package auctex-latexmk
    :hook
    (LaTeX-mode . (lambda ()
                    (add-to-list 'TeX-command-list
                                 '("latexmk" "(run-latexmk)"
                                   TeX-run-function nil t :help "Run latexmk") t)
                    (setq TeX-command-default "latexmk")))
    :init
    (setq auctex-latexmk-inherit-TeX-PDF-mode t)
    :config
    (auctex-latexmk-setup)
    (message "`auctex-latexmk' loaded")))

(when use-michelson
  (use-package deferred
    :config (message "`deferred' loaded"))

  ;; TODO: rewrite it without hardcoded paths
  (load (concat (getenv "HOME") "/dev/nl/tezos/emacs/michelson-mode.el") nil t)
  (setq michelson-client-command (concat (getenv "HOME") "/dev/nl/tezos/tezos-client"))
  (setq michelson-alphanet nil))

;; tuareg-mode has the prettify symbols itself
;; (ligature-set-ligatures 'tuareg-mode '(tuareg-prettify-symbols-basic-alist))
;; (ligature-set-ligatures 'tuareg-mode '(tuareg-prettify-symbols-extra-alist))
;; harmless if `prettify-symbols-mode' isn't active
;; (setq tuareg-prettify-symbols-full t)
(defun pokemacs-opam-shell-command-to-string (command)
  "Similar to shell-command-to-string, but returns nil unless the process
  returned 0, and ignores stderr (shell-command-to-string ignores return value)"
  (let* ((return-value 0)
         (return-string
          (with-output-to-string
            (setq return-value
                  (with-current-buffer standard-output
                    (process-file shell-file-name nil '(t nil) nil
                                  shell-command-switch command))))))
    (if (= return-value 0) return-string nil)))

(defun pokemacs-load-path-opam (&rest _)
  (let ((opam-share
         (let ((reply (pokemacs-opam-shell-command-to-string "opam var share --safe")))
           (when reply (substring reply 0 -1)))))
    (message opam-share)
    (let ((path (concat opam-share "/emacs/site-lisp")))
      (message "Path is %s" path)
      path
      )
    ))

(defun pokemacs-erase-and-fill-buffer (buffer)
  "Erase the current BUFFER and move point to beginning of buffer."
  (with-current-buffer buffer
    (let ((npoint (search-backward "**********")))
      (message "Buffer %S" buffer)
      (goto-char npoint)
      (message "Point %S" npoint)
      (set-window-point (get-buffer-window buffer) (point))
      (message "Window Point %S" (window-point (get-buffer-window buffer))))))

(when use-ocaml

  (defcustom pokemacs-ocaml-templates
    '(
      (af "assert false;" n>)
      (pp "Printf.printf \"" p "\" " p ";" n> q)
      (pe "Printf.eprintf \"" p "\" " p ";" n> q)
      (pf "Printf.fprintf " p " \"" p "\" " p ";" n> q)
      (fp "Format.printf \"" p "\" " p ";" n> q)
      (fe "Format.eprintf \"" p "\" " p ";" n> q)
      (ff "Format.fprintf " p " \"" p "\" " p ";" n> q)
      (if "if " p n> "then begin" n> p n> "end" n> "else begin" n> p n> "end" q)
      (loc "Format.eprintf \"%s@.\" __LOC__ ;" n> q))
    "Templates for OCaml used by Tempel."
    :group 'pokemacs-languages
    :type '(repeat sexp)
    :tag " OCaml Templates")

  (use-package tuareg
    :ensure-system-package
    ((ocamllsp . "opam install ocaml-lsp-server")
     (ocamlformat . "opam install ocamlformat")
     (ocaml-print-intf . "opam install ocaml-print-intf"))
    :mode ("\\.ml\\(<.*>\\)?\\'" . tuareg-mode)
    ;; The following line can be used instead of :ensure t to load
    ;; the tuareg.el file installed with tuareg when running opam install tuareg
    ;; I'm not really sure that it's useful.
    ;; :load-path (lambda () (pokemacs-load-path-opam))
    :general
    (:keymaps 'tuareg-mode-map
              "C-c C-t" nil
              "C-c C-w" nil
              "C-c C-l" nil
              "C-c o w" 'ocaml-utils-dune-watch)
    :config
    (defun pokemacs-map (l)
      (-map (lambda (x) (list
                    (concat "\\([^/]+\\)" (regexp-quote (car x)))
                    (concat "\\1" (regexp-quote (cdr x))))
              ) l))

    (defun cons-reverse (c)
      (cons (cdr c) (car c)))

    ;; Use opam to set environment
    (setq tuareg-opam-insinuate t)
    (setq tuareg-electric-indent t)

    (tuareg-opam-update-env (tuareg-opam-current-compiler))
    (defun pokemacs-update-opam-env (&rest _)
      (when (derived-mode-p 'tuareg-mode)
        (tuareg-opam-update-env nil)))

    (defun pokemacs-update-load-path-opam (&rest _)
      (when (derived-mode-p 'tuareg-mode)
        (let ((opam-share
               (let ((reply (pokemacs-opam-shell-command-to-string "opam var share --safe")))
                 (when reply (substring reply 0 -1)))))
          (add-to-list 'load-path (concat opam-share "/emacs/site-lisp")))))

    (if (boundp 'window-buffer-change-functions)
        (progn
          (add-hook 'window-buffer-change-functions 'pokemacs-update-opam-env)
          (add-hook 'window-buffer-change-functions 'pokemacs-update-load-path-opam))
      (progn
        (add-hook 'post-command-hook 'pokemacs-update-opam-env)
        (add-hook 'post-command-hook 'pokemacs-update-load-path-opam)))
    (unless (version< emacs-version "29")
      (message "unbind c-c c-a")
      (general-unbind tuareg-mode-map "C-c C-a")
      (let* ((l '(
                  (".mli" . ".ml")
                  (".mli" . ".mll")
                  (".mli" . ".mly")
                  (".mli" . ".pp.ml")
                  (".mli" . "_intf.ml")
                  ("_intf.ml" . ".ml")
                  (".pp.mli" . ".ml")
                  (".pp.mli" . ".mll")
                  (".pp.mli" . ".mly")
                  (".pp.mli" . ".pp.ml")
                  (".mll" . ".ml")
                  (".mll" . ".ml")
                  (".mly" . ".ml")
                  (".eliomi" . ".eliom")))
             (rl (-map #'cons-reverse l))
             (l (pokemacs-map l))
             (rl (pokemacs-map rl)))
        (setq find-sibling-rules (append find-sibling-rules l rl))))
    (message "`tuareg' loaded")
    :hook
    (tuareg-mode . (lambda () (pokemacs-set-local-tempel-template 'pokemacs-ocaml-templates)))
    (tuareg-mode . (lambda ()
                     ;; Commented symbols are actually prettier with ligatures or just ugly
                     (setq prettify-symbols-alist
                           '(
                             ("sqrt" . ?√)
                             ("&&" . ?⋀)        ; 'N-ARY LOGICAL AND' (U+22C0)
                             ("||" . ?⋁)        ; 'N-ARY LOGICAL OR' (U+22C1)
                             ("<>" . ?≠)
                             ;; Some greek letters for type parameters.
                             ("'a" . ?α)
                             ("'b" . ?β)
                             ("'c" . ?γ)
                             ("'d" . ?δ)
                             ("'e" . ?ε)
                             ("'f" . ?φ)
                             ("'i" . ?ι)
                             ("'k" . ?κ)
                             ("'m" . ?μ)
                             ("'n" . ?ν)
                             ("'o" . ?ω)
                             ("'p" . ?π)
                             ("'r" . ?ρ)
                             ("'s" . ?σ)
                             ("'t" . ?τ)
                             ("'x" . ?ξ)
                             ("fun" . ?λ)
                             ("not" . ?￢)
                             (":=" . ?⟸)
                             )))))

  (use-package ocp-indent
    ;; must be careful to always defer this, it has autoloads that adds hooks
    ;; which we do not want if the executable can't be found
    :hook (tuareg-mode . pokemacs-ocaml-init-ocp-indent-h)
    :config
    (defun pokemacs-ocaml-init-ocp-indent-h ()
      "Run `ocp-setup-indent', so long as the ocp-indent binary exists."
      (when (executable-find "ocp-indent")
        (ocp-setup-indent)))
    (message "`ocp-indent' loaded")))

(when use-ocaml
  (use-package tuareg-menhir
    :ensure nil
    :mode ("\\.mly'" . tuareg-menhir-mode)
    :config (message "`tuareg-menhir' loaded")))

(when use-ocaml
  (use-package dune-minor
    :load-path "lisp/"
    :ensure nil
    :hook (tuareg-mode . dune-minor-mode)
    :config (message "`dune-minor' loaded")))

(use-package ocaml-utils-mode
  :ensure (ocaml-utils-mode :host github :repo "mattiasdrp/ocaml-utils-mode")
  :hook (tuareg-mode . ocaml-utils-mode)
  ;; :load-path "~/ocaml-utils-mode/"
  )

(use-package pdf-tools
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :magic ("%PDF" . pdf-view-mode)
  :hook
  (pdf-view-mode . (lambda () (nlinum-mode 0)))
  :config
  (setq-default pdf-view-display-size 'fit-page)
  ;; Enable hiDPI support, but at the cost of memory! See politza/pdf-tools#51
  (setq pdf-view-use-scaling t
        pdf-view-use-imagemagick nil)
  (message "`pdf-tools' loaded"))

(use-package saveplace-pdf-view
  :after pdf-view
  :config (message "`saveplace-pdf-view' loaded"))

(when use-python
  (use-package python
    :ensure nil
    :hook (python-ts-mode . semantic-mode)
    :config
    ;; Remove guess indent python message
    (setq python-indent-guess-indent-offset-verbose nil)
    ;; Use IPython when available or fall back to regular Python
    (cond
     ((executable-find "ipython")
      (progn
        (setq python-shell-buffer-name "IPython")
        (setq python-shell-interpreter "ipython")
        (setq python-shell-interpreter-args "-i --simple-prompt")))
     ((executable-find "python3")
      (setq python-shell-interpreter "python3"))
     ((executable-find "python2")
      (setq python-shell-interpreter "python2"))
     (t
      (setq python-shell-interpreter "python")))
    (message "`python' loaded")))

(when use-python
  (use-package pyvenv
    :hook (python-ts-mode . pyvenv-mode)
    :config
    ;; Setting work on to easily switch between environments
    (setenv "WORKON_HOME" (expand-file-name "~/miniconda3/envs/"))
    ;; Display virtual envs in the menu bar
    (setq pyvenv-menu t)
    ;; Restart the python process when switching environments
    (add-hook 'pyvenv-post-activate-hooks (lambda ()
                                            (pyvenv-restart-python)))
    (message "`pyvenv' loaded")))

(when use-python
  (use-package lsp-pyright
    :after (python lsp-mode)
    :hook (python-ts-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp-deferred)))
    :config
    (setq lsp-clients-python-library-directories '("/usr/" "~/miniconda3/pkgs"))
    (setq lsp-pyright-disable-language-service nil
          lsp-pyright-disable-organize-imports nil
          lsp-pyright-auto-import-completions t
          lsp-pyright-use-library-code-for-types t
          lsp-pyright-venv-path "~/miniconda3/envs")
    (message "`lsp-pyright' loaded")))

(when use-racket
  (use-package racket-mode))

(when use-reason
  (defun shell-cmd (cmd)
    "Returns the stdout output of a shell command or nil if the command returned
   an error"
    (car (ignore-errors (apply 'process-lines (split-string cmd)))))

  (defun reason-cmd-where (cmd)
    (let ((where (shell-cmd cmd)))
      (if (not (string-equal "unknown flag ----where" where))
          where)))

  (let* ((refmt-bin (or (reason-cmd-where "refmt ----where")
                        (shell-cmd "which refmt")
                        (shell-cmd "which bsrefmt")))
         (merlin-bin (or (reason-cmd-where "ocamlmerlin ----where")
                         (shell-cmd "which ocamlmerlin")))
         (merlin-base-dir (when merlin-bin
                            (replace-regexp-in-string "bin/ocamlmerlin$" "" merlin-bin))))
    ;; Add merlin.el to the emacs load path and tell emacs where to find ocamlmerlin
    (when merlin-bin
      (add-to-list 'load-path (concat merlin-base-dir "share/emacs/site-lisp/"))
      (setq merlin-command merlin-bin))

    (when refmt-bin
      (setq refmt-command refmt-bin)))

  (use-package reason-mode
    :hook (reason-mode . (lambda ()
                           (add-hook 'before-save-hook 'refmt-before-save)
                           (merlin-mode)))
    :config (message "`reason-mode' loaded")))

(use-package rst-mode
  :ensure nil
  :hook (rst-mode . auto-fill-mode))

(when use-ruby
  (use-package enh-ruby-mode
    :mode (("Appraisals\\'" . enh-ruby-mode)
           ("\\(Rake\\|Thor\\|Guard\\|Gem\\|Cap\\|Vagrant\\|Berks\\|Pod\\|Puppet\\)file\\'" . enh-ruby-mode)
           ("\\.\\(rb\\|rabl\\|ru\\|builder\\|rake\\|thor\\|gemspec\\|jbuilder\\|pryrc\\)\\'" . enh-ruby-mode))
    :after lsp-mode
    :hook (enh-ruby-mode . lsp-deferred)
    :interpreter "ruby"
    :init
    (setq enh-ruby-deep-indent-paren nil
          enh-ruby-hanging-paren-deep-indent-level 2)
    :custom
    (ruby-insert-encoding-magic-comment nil "Not needed in Ruby 2")

    :ensure-system-package (solargraph . "gem install --user-install solargraph"))

  (use-package rbenv)

  (use-package inf-ruby)

  (use-package seeing-is-believing
    :hook (enh-ruby-mode . seeing-is-believing)
    :general
    (:keymaps 'enh-ruby-mode-map
              "C-c s" 'seeing-is-believing-run
              "C-c c" 'seeing-is-believing-clear)))

(when use-rust

  (use-package rust-mode
    :demand t
    :ensure t
    :init
    (setq rust-mode-treesitter-derive t)
    :config
    (require 'rustic nil t)
    (message "`rust-mode' loaded"))

  (use-package rustic
    :ensure (:repo "emacs-rustic/rustic")
    :after (rust-mode)
    :ensure-system-package
    ((taplo . "cargo install taplo-cli --features lsp")
     (rustfmt . "cargo install rustfmt"))
    :hook
    (rustic-mode . pokemacs-set-rustic-compilation-mode)
    :general
    (:keymaps 'rustic-mode-map
              "C-c s" 'lsp-rust-analyzer-status
              "C-M-;" 'pokemacs-rust-doc-comment-dwim-following
              "C-M-," 'pokemacs-rust-doc-comment-dwim-enclosing)
    :init
    (defun pokemacs-rust-doc-comment-dwim (c)
      "Comment or uncomment the current line or text selection."
      (interactive)

      ;; If there's no text selection, comment or uncomment the line
      ;; depending whether the WHOLE line is a comment. If there is a text
      ;; selection, using the first line to determine whether to
      ;; comment/uncomment.
      (let (p1 p2)
        (if (use-region-p)
            (save-excursion
              (setq p1 (region-beginning) p2 (region-end))
              (goto-char p1)
              (if (wholeLineIsCmt-p c)
                  (pokemacs-uncomment-region p1 p2 c)
                (pokemacs-comment-region p1 p2 c)
                ))
          (progn
            (if (wholeLineIsCmt-p c)
                (pokemacs-uncomment-current-line c)
              (pokemacs-comment-current-line c)
              )))))

    (defun pokemacs-wholeLineIsCmt-p (c)
      (save-excursion
        (beginning-of-line 1)
        (looking-at (concat "[ \t]*//" c))
        ))

    (defun pokemacs-comment-current-line (c)
      (interactive)
      (beginning-of-line 1)
      (insert (concat "//" c))
      )

    (defun pokemacs-uncomment-current-line (c)
      "Remove “//c” (if any) in the beginning of current line."
      (interactive)
      (when (wholeLineIsCmt-p c)
        (beginning-of-line 1)
        (search-forward (concat "//" c))
        (delete-backward-char 4)
        ))

    (defun pokemacs-comment-region (p1 p2 c)
      "Add “//c” to the beginning of each line of selected text."
      (interactive "r")
      (let ((deactivate-mark nil))
        (save-excursion
          (goto-char p2)
          (while (>= (point) p1)
            (pokemacs-comment-current-line c)
            (previous-line)
            ))))

    (defun pokemacs-uncomment-region (p1 p2 c)
      "Remove “//c” (if any) in the beginning of each line of selected text."
      (interactive "r")
      (let ((deactivate-mark nil))
        (save-excursion
          (goto-char p2)
          (while (>= (point) p1)
            (pokemacs-uncomment-current-line c)
            (previous-line) )) ))

    (defun pokemacs-rust-doc-comment-dwim-following ()
      (interactive)
      (pokemacs-rust-doc-comment-dwim "/ "))

    (defun pokemacs-rust-doc-comment-dwim-enclosing ()
      (interactive)
      (pokemacs-rust-doc-comment-dwim "! "))

    :config
    (define-derived-mode pokemacs-rustic-compilation-mode rustic-compilation-mode "compilation"
      "A wrapper for `rustic-compilation-mode'.")
    (defun pokemacs-function-rustic-compilation-mode (buf _str)
      (with-current-buffer buf
        (pokemacs-rustic-compilation-mode)
        (compilation-auto-jump buf (match-beginning 0))))

    (defun pokemacs-set-rustic-compilation-mode ()
      (add-to-list 'compilation-finish-functions 'pokemacs-function-rustic-compilation-mode))

    (setq rust-prettify-symbols-alist nil)
    ;; Allign to `.`
    (setq rustic-indent-method-chain t)
    ;; Let apheleia handle reformatting
    (setq rustic-babel-format-src-block nil)
    (setq rustic-format-trigger nil)
    ;; uncomment for less flashiness
    ;; (setq lsp-eldoc-hook nil)
    ;; (setq lsp-enable-symbol-highlighting nil)
    ;; (setq lsp-signature-auto-activate nil)
    ;; (defun my/rust-mode-outline-regexp-setup ()
    ;;   (setq-local outline-regexp "///[;]\\{1,8\\}[^ \t]"))
    (message "`rustic' loaded")))

(when use-sicp
  (use-package sicp))

(when use-web
  (use-package web-mode
    :mode "\\.php\\'"
    :config (message "`web-mode' loaded")))

(when use-web
  (use-package css-mode
    :ensure nil
    :mode "\\.css\\'"
    :config (message "`css-mode' loaded")))

(use-package simple-httpd
  :ensure nil
  :config (message "`simple-httpd' loaded"))

(use-package web-beautify
  :ensure (web-beautify :repo "https://github.com/yasuyk/web-beautify"))

(when use-zig
  (use-package zig-mode
    :custom
    (lsp-zig-zig-exe-path (file-truename "~/.zig/zig/zig"))
    (lsp-zig-zls-executable (file-truename "~/.zig/zls/zig-out/bin/zls"))
    (zig-format-on-save nil))

  (use-package zig-ts-mode
    :ensure (:type git :host codeberg :repo "meow_king/zig-ts-mode")
    :init
    (setq my-zig-tsauto-config
          (make-treesit-auto-recipe
           :lang 'zig
           :ts-mode 'zig-ts-mode
           :remap 'zig-mode
           :url "https://github.com/maxxnino/tree-sitter-zig"
           :ext "\\.zig\\'"))
    (add-to-list 'treesit-auto-recipe-list my-zig-tsauto-config)
    (add-to-list 'auto-mode-alist '("\\.zig\\'" . zig-ts-mode))
    :config
    (require 'zig-mode)
    (set-keymap-parent zig-ts-mode-map zig-mode-map)))

(setq post-custom-file (expand-file-name "post-custom.el" user-emacs-directory))
(load post-custom-file)

(message "`init' file loaded")
;;;; Footer
(message "Number of gcs: %d" gcs-done)
;; End:
(provide 'init)

;;; init.el ends here
