#+title: Emacs Post Init
#+author: mattiasdrp
#+date: <2022-08-17 Wed>
#+language: en_US
#+property: header-args :results silent :exports code :tangle yes

#+AUTO_TANGLE: t
#+keywords: Emacs

Literate configuration for [[file:post-custom.el][post-init.el]].

* Table of Contents
:PROPERTIES:
:TOC:      :include all :ignore this
:END:

:CONTENTS:
- [[#header][Header]]
- [[#mail-gpg-et-al][Mail, gpg et al]]
  - [[#mu4e][Mu4e]]
- [[#keybindings][Keybindings]]
  - [[#unbinding][Unbinding]]
    - [[#globally][Globally]]
    - [[#locally-to-a-keymap][Locally to a keymap]]
  - [[#binding][Binding]]
    - [[#globally][Globally]]
    - [[#locally][Locally]]
- [[#end][End]]
:END:

* Header
:PROPERTIES:
:CUSTOM_ID: header
:END:

#+begin_src emacs-lisp
  ;;; post-init.el --- Emacs customization -*- lexical-binding: t -*-

  ;; Copyright (c) 2022 mattiasdrp and contributors.

  ;; Author: mattiasdrp
  ;; Maintainer: mattiasdrp <https://github.com/mattiasdrp>
  ;; Created: 17 august 2022
  ;; Version: 1.0
  ;; Licence: MIT
  ;; Keywords: emacs, init, convenience, configuration
  ;; URL: https://github.com/mattiasdrp/pokemacs

    ;;; Commentary:
  ;; This file will be loaded when emacs has finished initializing everything
  ;; and allows to override some bindings and behaviours that are not
  ;; controlled by custom.el

  ;;; Code:

#+end_src

* Mail, gpg et al
:PROPERTIES:
:CUSTOM_ID: mail-gpg-et-al
:END:

*** Mu4e
:PROPERTIES:
:CUSTOM_ID: mu4e
:END:

Based on this [[https://macowners.club/posts/email-emacs-mu4e-macos/#setup-msmtp-for-sending][tutorial]].
For WSL see [[https://www.39digits.com/signed-git-commits-on-wsl2-using-visual-studio-code][this]]

- Create directories for your mails
    #+BEGIN_SRC shell :tangle no
      .maildir
      ├── acc1
      ├── acc2
      └── acc3
    #+END_SRC

- Install [[https://www.djcbsoftware.nl/code/mu/mu4e/Installation.html][mu4e]] from the latest release.

- Fill a ~.mbsyncrc~ with the following fields (for each account):
    #+BEGIN_SRC shell :tangle no
      IMAPAccount acc
      Host imap.mail.me.com
      User imap-user
      PassCmd "gpg2 -q --for-your-eyes-only --no-tty -d ~/mu4e/.mbsyncpass-acc.gpg"
      Port 993
      SSLType IMAPS
      SSLVersions TLSv1.2
      AuthMechs PLAIN
      SystemCertificates no
      CertificateFile /etc/ssl/certs/ca-certificates.crt

      IMAPStore acc-remote
      Account acc

      MaildirStore acc-local
      SubFolders Verbatim
      Path ~/.maildir/acc/
      Inbox ~/.maildir/acc/INBOX

      Channel acc
      Far :acc-remote:
      Near :acc-local:
      Patterns *
      Create Near
      Sync All
      Expunge Both
      SyncState *
    #+END_SRC

- To create ~.mbsyncpass-acc.gpg~ store your password in ~.mbsyncpass-acc~ and encrypt with ~gpg2 -c .mbsyncpass-acc~ before removing the original file.

- Synchronise all your mails with ~mbsync -aV~

- Initialise ~mu4e~ with
    #+BEGIN_SRC shell :tangle no
      mu init -m ~/.maildir \
         --my-address dummy@icloud.com \
         --my-address dummy@gmail.com \
         --my-address dummy@example.com
    #+END_SRC

- Create the index with ~mu index~

- Fill a ~.msmtprc~ with the following fields (for each account):
    #+BEGIN_SRC shell :tangle no
      # Set default values for all the accounts.
      defaults
      logfile ~/.maildir/msmtp.log
      tls_trust_file /etc/ssl/certs/ca-certificates.crt

      # ======================================================================

      account acc
      auth on
      host smtp.mail.me.com
      port 465
      protocol smtp
      from smtp-login@acc.com
      user smtp-login
      passwordeval "gpg2 -q --for-your-eyes-only --no-tty -d ~/mu4e/.mbsyncpass-acc.gpg"
      tls on
      tls_starttls off
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (when use-mu4e
    (use-package smtpmail
      :ensure nil
      :ensure-system-package msmtp))

  ;; (load-file (expand-file-name "~/mu4e/mu4e.el"))
#+END_SRC

* Tezos utilities

#+begin_src emacs-lisp
  (defgroup tezos nil
    "Tezos values."
    :group 'pokemacs
    :tag "ꜩ Tezos")

  (defcustom use-tezos-utilities t
  "If non-nil, uses tezos utilities."
    :group 'tezos
    :type 'boolean
    :tag "ꜩ Tezos utilities")

  (defcustom tezos-organisation-name "Nomadic Labs"
  "If non-nil, uses tezos utilities."
    :group 'tezos
    :type 'boolean
    :tag "ꜩ Tezos organisation name")

  (defcustom tezos-organisation-email "contact@nomadic-labs.com"
  "If non-nil, uses tezos utilities."
    :group 'tezos
    :type 'boolean
    :tag "ꜩ Tezos organisation email")

  (when use-tezos-utilities
    (defun pokemacs-concat-with-newlines (&rest strings)
      "Concatenate STRINGS with a newline between each."
      (apply 'concat (mapcar (lambda (s) (concat s "\n")) strings)))

    (defun pokemacs-insert-mit-spdx-header ()
      (let ((year (format-time-string "%Y")))
        (insert
         (cond

          ;; OCaml file
          ((derived-mode-p 'tuareg-mode)
           (pokemacs-concat-with-newlines
            "(*****************************************************************************)"
            (format "(*%77s" "*)")
            (format "(* SPDX-License-Identifier: MIT%48s" "*)")
            (concat "(* SPDX-FileCopyrightText: "
                    year
                    " "
                    (concat
                     tezos-organisation-name
                     ". <"
                     tezos-organisation-email
                     (format "> %6s" "*)")))
            "(*                                                                           *)"
            "(*****************************************************************************)"))

          ;; Rust file
          ((derived-mode-p 'rust-mode)
           (pokemacs-concat-with-newlines
            "//"
            "// SPDX-License-Identifier: MIT"
            (concat
             "// SPDX-FileCopyrightText: "
             year
             " "
             tezos-organisation-name
             " "
             tezos-organisation-email)
            "//"))))))

    (defun auto-insert ()
      "Insert default contents into new files if variable `auto-insert' is non-nil.
  Matches the visited file name against the elements of `auto-insert-alist'."
      (interactive)
      (and (not buffer-read-only)
           (or (eq this-command 'auto-insert)
               (and auto-insert
                    (bobp) (eobp)))
           (let* ((case-fold-search nil)
                  (desc nil)
                  (_ (message "here %S" this-command))
                  ;; Find first matching alist entry.
                  (action
                   (seq-some
                    (pcase-lambda (`(,cond . ,action))
                      (if (atom cond)
                          (setq desc cond)
                        ;; if `cond' is a predicate, don't split it but set `desc' to a custom string
                        (if (and (consp cond) (equal (car cond) 'predicate))
                            (setq desc "predicate")
                          (setq desc (cdr cond)
                                cond (car cond))))
                      (when (cond
                             ;; `cond' should be a major-mode variable
                             ((symbolp cond)
                              (derived-mode-p cond))

                             ;; `cond' should be a predicate that takes no argument
                             ((and (consp cond) (equal (car cond) 'predicate))
                              (funcall (cadr cond)))

                             ;; cond should be a regexp
                             (t
                              (and buffer-file-name
                                   (string-match cond buffer-file-name))))
                        action))
                    auto-insert-alist)))
             (goto-char 1)
             ;; Now, if we found something, do it
             (and action
                  (or (not (stringp action))
                      (file-readable-p (expand-file-name
                                        action auto-insert-directory)))
                  (or (not auto-insert-query)
                      (if (eq auto-insert-query 'function)
                          (eq this-command 'auto-insert))
                      (y-or-n-p (format auto-insert-prompt desc)))
                  (mapc
                   (lambda (action)
                     (if (stringp action)
                         (if (file-readable-p
                              (setq action (expand-file-name
                                            action auto-insert-directory)))
                             (insert-file-contents action))
                       (save-window-excursion
                         ;; make buffer visible before skeleton or function
                         ;; which might ask the user for something
                         (switch-to-buffer (current-buffer))
                         (if (and (consp action)
                                  (not (functionp action)))
                             (skeleton-insert action)
                           (funcall action)))))
                   (if (vectorp action)
                       action
                     (vector action))))
             (and (buffer-modified-p)
                  (not (eq this-command 'auto-insert))
                  (set-buffer-modified-p (eq auto-insert t)))))
      ;; Return nil so that it could be used in
      ;; `find-file-not-found-functions', though that's probably inadvisable.
      nil)

    (defun pokemacs-get-git-repo-url ()
      "Return the URL of the Git repository for the current project."
      (interactive)
      (when-let* ((git-root (vc-git-root default-directory))
                  (remotes (with-temp-buffer
                             (let ((default-directory git-root))
                               (call-process "git" nil t nil "remote")
                               (split-string (buffer-string) "\n" t))))
                  (remote (car remotes)))
        (vc-git-repository-url default-directory remote)))

    (defun pokemacs-split-git-url (url)
      "Split a GIT URL into protocol, user and repo."
      (let ((regex "^\\(?1:https?\\|ssh\\|git\\|ftps?\\)\\(://\\|@\\)\\(\\([^/@]+\\)@\\)?\\([^/:]+\\)[/:]\\(?2:[^/:]+\\)/\\(\\(?3:[^.]+\\)\\(.git\\)?/?\\)$"))
        (let* ((_ (string-match regex url))
               (protocol (match-string 1 url))
               (org (match-string 2 url))
               (repo (match-string 3 url)))
          (list protocol org repo))))

    (defun pokemacs-tezos-repo? ()
      (when-let* ((git-url (pokemacs-get-git-repo-url))
                  (url-destructed (pokemacs-split-git-url git-url)))
        (cl-destructuring-bind (_ org repo) url-destructed
          (and (string-equal "tezos" org) (string-equal "tezos" repo)))))

    (use-package autoinsert
      :ensure nil
      ;; :after projectile
      :demand t
      :init
      (auto-insert-mode t)
      :config
      (add-to-list 'auto-insert-alist
                   '(pokemacs-tezos-repo? . pokemacs-insert-mit-spdx-header))
      (message "`auto-insert-mode' loaded")))
#+end_src

* Keybindings
:PROPERTIES:
:CUSTOM_ID: keybindings
:END:

** Unbinding
:PROPERTIES:
:CUSTOM_ID: unbinding
:END:

You can unbind anything you want.

*** Globally
:PROPERTIES:
:CUSTOM_ID: globally
:END:

#+begin_src emacs-lisp
  ;; (general-unbind
  ;;   "C-o"
  ;;   )
#+end_src

*** Locally to a keymap
:PROPERTIES:
:CUSTOM_ID: locally-to-a-keymap
:END:

(notice the quote before the name of the map)

#+begin_src emacs-lisp
  ;; (general-unbind
  ;;   :keymaps 'tuareg-mode-map
  ;;   "C-c TAB"
  ;;   )
#+end_src

** Binding
:PROPERTIES:
:CUSTOM_ID: binding
:END:

You can bind anything you want.

*** Globally
:PROPERTIES:
:CUSTOM_ID: globally
:END:

#+begin_src emacs-lisp
  ;; (general-define-key
  ;;  "C-x 1"                 'delete-other-windows
  ;;  )
#+end_src

Grouped under a prefix, allowing to define multiple keybindings under the same prefix without having to rewrite the prefix.

#+begin_src emacs-lisp
  ;; (general-define-key
  ;;  :prefix "M-z"
  ;;  "w"                       'mdrp/resize-window-width
  ;;  "h"                       'mdrp/resize-window-height)
#+end_src

*** Locally
:PROPERTIES:
:CUSTOM_ID: locally
:END:

(notice the quote before the name of the map)

#+begin_src emacs-lisp
  ;; (general-define-key
  ;;  :keymaps 'tuareg-mode-map
  ;;  "C-x M-1"                 'delete-other-windows
  ;;  )
#+end_src

You can obviously combine ~:keymaps~ and ~:prefix~

* End
:PROPERTIES:
:CUSTOM_ID: end
:END:

#+begin_src emacs-lisp
  (provide 'post-init)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; post-init.el ends here
#+end_src
